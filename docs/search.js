window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
<<<<<<< HEAD
    /** pdoc search index */const docs = [{"fullname": "brukeropus", "modulename": "brukeropus", "kind": "module", "doc": "<p><code>brukeropus</code> is a Python package for interacting with Bruker's OPUS spectroscopy software. Currently, the package can\nread OPUS data files and communicate/control OPUS software using the DDE communication protocol)</p>\n\n<h3 id=\"installation\">Installation</h3>\n\n<p><code>brukeropus</code> requires <code>python 3.6+</code> and <code>numpy</code>, but <code>matplotlib</code> is needed to run the plotting examples.  You can\ninstall with pip:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">brukeropus</span>\n</code></pre>\n</div>\n\n<h3 id=\"namespace\">Namespace</h3>\n\n<p><code>brukeropus</code> provides direct imports to the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">find_opus_files</span><span class=\"p\">,</span> <span class=\"n\">read_opus</span><span class=\"p\">,</span> <span class=\"n\">OPUSFile</span><span class=\"p\">,</span> <span class=\"n\">Opus</span>\n</code></pre>\n</div>\n\n<p>All other file functions or classes can be directly imported from the <code>brukeropus.file</code> or <code>brukeropus.control</code>\nsubmodules, e.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus.file</span> <span class=\"kn\">import</span> <span class=\"n\">parse_file_and_print</span>\n</code></pre>\n</div>\n\n<p>It is recommended that you do <strong>not</strong> import from the fully qualified namespace, e.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus.file.utils</span> <span class=\"kn\">import</span> <span class=\"n\">parse_file_and_print</span>\n</code></pre>\n</div>\n\n<p>as that namespace is subject to change. Instead import directly from <code>brukeropus</code> or its first level submodules.</p>\n\n<h3 id=\"reading-opus-files-basic-usage\">Reading OPUS Files (Basic Usage)</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">read_opus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">opus_file</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns an OPUSFile class</span>\n\n<span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">print_parameters</span><span class=\"p\">()</span>  <span class=\"c1\"># Pretty prints all metadata in the file to the console</span>\n\n<span class=\"k\">if</span> <span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">data_keys</span><span class=\"p\">:</span>  <span class=\"c1\"># If absorbance spectra was extracted from file</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>  <span class=\"c1\"># Plot absorbance spectra</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">sfm</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; - &#39;</span> <span class=\"o\">+</span> <span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">snm</span><span class=\"p\">)</span>  <span class=\"c1\"># Sets plot title to Sample Form - Sample Name</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>  <span class=\"c1\"># Display plot</span>\n</code></pre>\n</div>\n\n<p>More detailed documentation on the file submodule can be found in <code>brukeropus.file</code></p>\n\n<h3 id=\"controlling-opus-software-basic-usage\">Controlling OPUS Software (Basic Usage)</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">opus</span><span class=\"p\">,</span> <span class=\"n\">read_opus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">opus</span> <span class=\"o\">=</span> <span class=\"n\">Opus</span><span class=\"p\">()</span>  <span class=\"c1\"># Connects to actively running OPUS software</span>\n\n<span class=\"n\">apt_options</span> <span class=\"o\">=</span> <span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_param_options</span><span class=\"p\">(</span><span class=\"s1\">&#39;apt&#39;</span><span class=\"p\">)</span> <span class=\"c1\"># Get all valid aperture settings</span>\n\n<span class=\"k\">for</span> <span class=\"n\">apt</span> <span class=\"ow\">in</span> <span class=\"n\">apt_options</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"c1\"># Loop over all but the two smallest and two largest aperature settings</span>\n    <span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">measure_sample</span><span class=\"p\">(</span><span class=\"n\">apt</span><span class=\"o\">=</span><span class=\"n\">apt</span><span class=\"p\">,</span> <span class=\"n\">nss</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">unload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># Perform measurement and unload file from OPUS</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span> <span class=\"c1\"># Read OPUS file from measurement</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">apt</span><span class=\"p\">)</span> <span class=\"c1\"># Plot single-channel sample spectra</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>More detailed documentation on the control submodule can be found in <code>brukeropus.control</code>.</p>\n"}, {"fullname": "brukeropus.control", "modulename": "brukeropus.control", "kind": "module", "doc": "<p>The <code>brukeropus.control</code> submodule of <code>brukeropus</code> includes the <code>Opus</code> class for communicating with OPUS software. The\n<code>Opus</code> class currently supports communication through the Dynamic Data Exchange (DDE) protocol.  This class can be used\nto script measurement sweeps and perform various low-level operations (e.g. move mirrors, rotate polarizers, etc.). In\norder to communicate with OPUS, the software must be open, logged in, and running on the same PC as <code>brukeropus</code>.</p>\n\n<h3 id=\"initializingverifying-connection-to-opus-software\">Initializing/verifying connection to OPUS Software</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">Opus</span>\n\n<span class=\"n\">opus</span> <span class=\"o\">=</span> <span class=\"n\">Opus</span><span class=\"p\">()</span>  <span class=\"c1\"># initialization of class automatically connects to open OPUS software</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">())</span>  <span class=\"c1\"># prints the current OPUS software version</span>\n</code></pre>\n</div>\n\n<h3 id=\"get-information-about-a-parameter-eg-dtc-apt-vel\">Get information about a parameter (e.g. DTC, APT, VEL).</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">opus</span> <span class=\"o\">=</span> <span class=\"n\">Opus</span><span class=\"p\">()</span>\n<span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;vel&#39;</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_param_label</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_param_options</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h3 id=\"perform-a-measurement-sweep\">Perform a measurement sweep</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">opus</span><span class=\"p\">,</span> <span class=\"n\">read_opus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">opus</span> <span class=\"o\">=</span> <span class=\"n\">Opus</span><span class=\"p\">()</span>  <span class=\"c1\"># Connects to actively running OPUS software</span>\n\n<span class=\"n\">apt_options</span> <span class=\"o\">=</span> <span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_param_options</span><span class=\"p\">(</span><span class=\"s1\">&#39;apt&#39;</span><span class=\"p\">)</span> <span class=\"c1\"># Get all valid aperture settings</span>\n\n<span class=\"k\">for</span> <span class=\"n\">apt</span> <span class=\"ow\">in</span> <span class=\"n\">apt_options</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"c1\"># Loop over all but the two smallest and two largest aperature settings</span>\n    <span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">measure_sample</span><span class=\"p\">(</span><span class=\"n\">apt</span><span class=\"o\">=</span><span class=\"n\">apt</span><span class=\"p\">,</span> <span class=\"n\">nss</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">unload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># Perform measurement and unload file from OPUS</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span> <span class=\"c1\"># Read OPUS file from measurement</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">apt</span><span class=\"p\">)</span> <span class=\"c1\"># Plot single-channel sample spectra</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>For complete <code>Opus</code> documentation, see: <code>brukeropus.control.opus</code></p>\n"}, {"fullname": "brukeropus.control.dde", "modulename": "brukeropus.control.dde", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.control.dde.HCONV", "modulename": "brukeropus.control.dde", "qualname": "HCONV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_void_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.HDDEDATA", "modulename": "brukeropus.control.dde", "qualname": "HDDEDATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_void_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.HSZ", "modulename": "brukeropus.control.dde", "qualname": "HSZ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_void_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.LPBYTE", "modulename": "brukeropus.control.dde", "qualname": "LPBYTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_char_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.LPDWORD", "modulename": "brukeropus.control.dde", "qualname": "LPDWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.wintypes.LP_c_ulong&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.LPSTR", "modulename": "brukeropus.control.dde", "qualname": "LPSTR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_char_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.ULONG_PTR", "modulename": "brukeropus.control.dde", "qualname": "ULONG_PTR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_ulong&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.PCONVCONTEXT", "modulename": "brukeropus.control.dde", "qualname": "PCONVCONTEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_void_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.DMLERR_NO_ERROR", "modulename": "brukeropus.control.dde", "qualname": "DMLERR_NO_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "brukeropus.control.dde.CF_TEXT", "modulename": "brukeropus.control.dde", "qualname": "CF_TEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "brukeropus.control.dde.CF_BITMAP", "modulename": "brukeropus.control.dde", "qualname": "CF_BITMAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "brukeropus.control.dde.CF_METAFILEPICT", "modulename": "brukeropus.control.dde", "qualname": "CF_METAFILEPICT", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "brukeropus.control.dde.CF_SYLK", "modulename": "brukeropus.control.dde", "qualname": "CF_SYLK", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "brukeropus.control.dde.CF_DIF", "modulename": "brukeropus.control.dde", "qualname": "CF_DIF", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "brukeropus.control.dde.CF_TIFF", "modulename": "brukeropus.control.dde", "qualname": "CF_TIFF", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "brukeropus.control.dde.CF_OEMTEXT", "modulename": "brukeropus.control.dde", "qualname": "CF_OEMTEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "7"}, {"fullname": "brukeropus.control.dde.CF_DIB", "modulename": "brukeropus.control.dde", "qualname": "CF_DIB", "kind": "variable", "doc": "<p></p>\n", "default_value": "8"}, {"fullname": "brukeropus.control.dde.CF_PALETTE", "modulename": "brukeropus.control.dde", "qualname": "CF_PALETTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "9"}, {"fullname": "brukeropus.control.dde.CF_PENDATA", "modulename": "brukeropus.control.dde", "qualname": "CF_PENDATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "brukeropus.control.dde.CF_RIFF", "modulename": "brukeropus.control.dde", "qualname": "CF_RIFF", "kind": "variable", "doc": "<p></p>\n", "default_value": "11"}, {"fullname": "brukeropus.control.dde.CF_WAVE", "modulename": "brukeropus.control.dde", "qualname": "CF_WAVE", "kind": "variable", "doc": "<p></p>\n", "default_value": "12"}, {"fullname": "brukeropus.control.dde.CF_UNICODETEXT", "modulename": "brukeropus.control.dde", "qualname": "CF_UNICODETEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "13"}, {"fullname": "brukeropus.control.dde.CF_ENHMETAFILE", "modulename": "brukeropus.control.dde", "qualname": "CF_ENHMETAFILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "14"}, {"fullname": "brukeropus.control.dde.CF_HDROP", "modulename": "brukeropus.control.dde", "qualname": "CF_HDROP", "kind": "variable", "doc": "<p></p>\n", "default_value": "15"}, {"fullname": "brukeropus.control.dde.CF_LOCALE", "modulename": "brukeropus.control.dde", "qualname": "CF_LOCALE", "kind": "variable", "doc": "<p></p>\n", "default_value": "16"}, {"fullname": "brukeropus.control.dde.CF_DIBV5", "modulename": "brukeropus.control.dde", "qualname": "CF_DIBV5", "kind": "variable", "doc": "<p></p>\n", "default_value": "17"}, {"fullname": "brukeropus.control.dde.CF_MAX", "modulename": "brukeropus.control.dde", "qualname": "CF_MAX", "kind": "variable", "doc": "<p></p>\n", "default_value": "18"}, {"fullname": "brukeropus.control.dde.DDE_FACK", "modulename": "brukeropus.control.dde", "qualname": "DDE_FACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "32768"}, {"fullname": "brukeropus.control.dde.DDE_FBUSY", "modulename": "brukeropus.control.dde", "qualname": "DDE_FBUSY", "kind": "variable", "doc": "<p></p>\n", "default_value": "16384"}, {"fullname": "brukeropus.control.dde.DDE_FDEFERUPD", "modulename": "brukeropus.control.dde", "qualname": "DDE_FDEFERUPD", "kind": "variable", "doc": "<p></p>\n", "default_value": "16384"}, {"fullname": "brukeropus.control.dde.DDE_FACKREQ", "modulename": "brukeropus.control.dde", "qualname": "DDE_FACKREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "32768"}, {"fullname": "brukeropus.control.dde.DDE_FRELEASE", "modulename": "brukeropus.control.dde", "qualname": "DDE_FRELEASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "8192"}, {"fullname": "brukeropus.control.dde.DDE_FREQUESTED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FREQUESTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "4096"}, {"fullname": "brukeropus.control.dde.DDE_FAPPSTATUS", "modulename": "brukeropus.control.dde", "qualname": "DDE_FAPPSTATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "255"}, {"fullname": "brukeropus.control.dde.DDE_FNOTPROCESSED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FNOTPROCESSED", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "brukeropus.control.dde.DDE_FACKRESERVED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FACKRESERVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-49408"}, {"fullname": "brukeropus.control.dde.DDE_FADVRESERVED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FADVRESERVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-49153"}, {"fullname": "brukeropus.control.dde.DDE_FDATRESERVED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FDATRESERVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-45057"}, {"fullname": "brukeropus.control.dde.DDE_FPOKRESERVED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FPOKRESERVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-8193"}, {"fullname": "brukeropus.control.dde.XTYPF_NOBLOCK", "modulename": "brukeropus.control.dde", "qualname": "XTYPF_NOBLOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "brukeropus.control.dde.XTYPF_NODATA", "modulename": "brukeropus.control.dde", "qualname": "XTYPF_NODATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "brukeropus.control.dde.XTYPF_ACKREQ", "modulename": "brukeropus.control.dde", "qualname": "XTYPF_ACKREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "8"}, {"fullname": "brukeropus.control.dde.XCLASS_MASK", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_MASK", "kind": "variable", "doc": "<p></p>\n", "default_value": "64512"}, {"fullname": "brukeropus.control.dde.XCLASS_BOOL", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_BOOL", "kind": "variable", "doc": "<p></p>\n", "default_value": "4096"}, {"fullname": "brukeropus.control.dde.XCLASS_DATA", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "8192"}, {"fullname": "brukeropus.control.dde.XCLASS_FLAGS", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_FLAGS", "kind": "variable", "doc": "<p></p>\n", "default_value": "16384"}, {"fullname": "brukeropus.control.dde.XCLASS_NOTIFICATION", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_NOTIFICATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "32768"}, {"fullname": "brukeropus.control.dde.XTYP_ERROR", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "32770"}, {"fullname": "brukeropus.control.dde.XTYP_ADVDATA", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ADVDATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "16400"}, {"fullname": "brukeropus.control.dde.XTYP_ADVREQ", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ADVREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "8226"}, {"fullname": "brukeropus.control.dde.XTYP_ADVSTART", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ADVSTART", "kind": "variable", "doc": "<p></p>\n", "default_value": "4144"}, {"fullname": "brukeropus.control.dde.XTYP_ADVSTOP", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ADVSTOP", "kind": "variable", "doc": "<p></p>\n", "default_value": "32832"}, {"fullname": "brukeropus.control.dde.XTYP_EXECUTE", "modulename": "brukeropus.control.dde", "qualname": "XTYP_EXECUTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "16464"}, {"fullname": "brukeropus.control.dde.XTYP_CONNECT", "modulename": "brukeropus.control.dde", "qualname": "XTYP_CONNECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "4194"}, {"fullname": "brukeropus.control.dde.XTYP_CONNECT_CONFIRM", "modulename": "brukeropus.control.dde", "qualname": "XTYP_CONNECT_CONFIRM", "kind": "variable", "doc": "<p></p>\n", "default_value": "32882"}, {"fullname": "brukeropus.control.dde.XTYP_XACT_COMPLETE", "modulename": "brukeropus.control.dde", "qualname": "XTYP_XACT_COMPLETE", "kind": "variable", "doc": "<p></p>\n", "default_value": "32896"}, {"fullname": "brukeropus.control.dde.XTYP_POKE", "modulename": "brukeropus.control.dde", "qualname": "XTYP_POKE", "kind": "variable", "doc": "<p></p>\n", "default_value": "16528"}, {"fullname": "brukeropus.control.dde.XTYP_REGISTER", "modulename": "brukeropus.control.dde", "qualname": "XTYP_REGISTER", "kind": "variable", "doc": "<p></p>\n", "default_value": "32930"}, {"fullname": "brukeropus.control.dde.XTYP_REQUEST", "modulename": "brukeropus.control.dde", "qualname": "XTYP_REQUEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "8368"}, {"fullname": "brukeropus.control.dde.XTYP_DISCONNECT", "modulename": "brukeropus.control.dde", "qualname": "XTYP_DISCONNECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "32962"}, {"fullname": "brukeropus.control.dde.XTYP_UNREGISTER", "modulename": "brukeropus.control.dde", "qualname": "XTYP_UNREGISTER", "kind": "variable", "doc": "<p></p>\n", "default_value": "32978"}, {"fullname": "brukeropus.control.dde.XTYP_WILDCONNECT", "modulename": "brukeropus.control.dde", "qualname": "XTYP_WILDCONNECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "8418"}, {"fullname": "brukeropus.control.dde.XTYP_MONITOR", "modulename": "brukeropus.control.dde", "qualname": "XTYP_MONITOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "33010"}, {"fullname": "brukeropus.control.dde.XTYP_MASK", "modulename": "brukeropus.control.dde", "qualname": "XTYP_MASK", "kind": "variable", "doc": "<p></p>\n", "default_value": "240"}, {"fullname": "brukeropus.control.dde.XTYP_SHIFT", "modulename": "brukeropus.control.dde", "qualname": "XTYP_SHIFT", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "brukeropus.control.dde.TIMEOUT_ASYNC", "modulename": "brukeropus.control.dde", "qualname": "TIMEOUT_ASYNC", "kind": "variable", "doc": "<p></p>\n", "default_value": "4294967295"}, {"fullname": "brukeropus.control.dde.get_winfunc", "modulename": "brukeropus.control.dde", "qualname": "get_winfunc", "kind": "function", "doc": "<p>Retrieve a function from a library, and set the data types.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">libname</span>,</span><span class=\"param\">\t<span class=\"n\">funcname</span>,</span><span class=\"param\">\t<span class=\"n\">restype</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">argtypes</span><span class=\"o\">=</span><span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">_libcache</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;user32&#39;</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">WinDLL</span> <span class=\"s1\">&#39;user32&#39;</span><span class=\"p\">,</span> <span class=\"n\">handle</span> <span class=\"mi\">7</span><span class=\"n\">fffa9710000</span><span class=\"o\">&gt;</span><span class=\"p\">}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.DDECALLBACK", "modulename": "brukeropus.control.dde", "qualname": "DDECALLBACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.WINFUNCTYPE.&lt;locals&gt;.WinFunctionType&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.DDE", "modulename": "brukeropus.control.dde", "qualname": "DDE", "kind": "class", "doc": "<p>Object containing all the DDE functions</p>\n"}, {"fullname": "brukeropus.control.dde.DDE.AccessData", "modulename": "brukeropus.control.dde", "qualname": "DDE.AccessData", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.ClientTransaction", "modulename": "brukeropus.control.dde", "qualname": "DDE.ClientTransaction", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.Connect", "modulename": "brukeropus.control.dde", "qualname": "DDE.Connect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.CreateStringHandle", "modulename": "brukeropus.control.dde", "qualname": "DDE.CreateStringHandle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.Disconnect", "modulename": "brukeropus.control.dde", "qualname": "DDE.Disconnect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.GetLastError", "modulename": "brukeropus.control.dde", "qualname": "DDE.GetLastError", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.Initialize", "modulename": "brukeropus.control.dde", "qualname": "DDE.Initialize", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.FreeDataHandle", "modulename": "brukeropus.control.dde", "qualname": "DDE.FreeDataHandle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.FreeStringHandle", "modulename": "brukeropus.control.dde", "qualname": "DDE.FreeStringHandle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.QueryString", "modulename": "brukeropus.control.dde", "qualname": "DDE.QueryString", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.UnaccessData", "modulename": "brukeropus.control.dde", "qualname": "DDE.UnaccessData", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.Uninitialize", "modulename": "brukeropus.control.dde", "qualname": "DDE.Uninitialize", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDEError", "modulename": "brukeropus.control.dde", "qualname": "DDEError", "kind": "class", "doc": "<p>Exception raise when a DDE errpr occures.</p>\n", "bases": "builtins.RuntimeError"}, {"fullname": "brukeropus.control.dde.DDEError.__init__", "modulename": "brukeropus.control.dde", "qualname": "DDEError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">idInst</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "brukeropus.control.dde.DDEClient", "modulename": "brukeropus.control.dde", "qualname": "DDEClient", "kind": "class", "doc": "<p>The DDEClient class.</p>\n\n<p>Use this class to create and manage a connection to a service/topic.  To get\nclassbacks subclass DDEClient and overwrite callback.</p>\n"}, {"fullname": "brukeropus.control.dde.DDEClient.__init__", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.__init__", "kind": "function", "doc": "<p>Create a connection to a service/topic.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">service</span>, </span><span class=\"param\"><span class=\"n\">topic</span></span>)</span>"}, {"fullname": "brukeropus.control.dde.DDEClient.advise", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.advise", "kind": "function", "doc": "<p>Request updates when DDE data changes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span>, </span><span class=\"param\"><span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.DDEClient.execute", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.execute", "kind": "function", "doc": "<p>Execute a DDE command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">command</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.DDEClient.request", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.request", "kind": "function", "doc": "<p>Request data from DDE service.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.DDEClient.callback", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.callback", "kind": "function", "doc": "<p>Calback function for advice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.WinMSGLoop", "modulename": "brukeropus.control.dde", "qualname": "WinMSGLoop", "kind": "function", "doc": "<p>Run the main windows message loop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus", "modulename": "brukeropus.control.opus", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.control.opus.ERROR_CODES", "modulename": "brukeropus.control.opus", "qualname": "ERROR_CODES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{1: &#x27;Not an Opus Command&#x27;, 2: &#x27;Unknown Opus Command&#x27;, 3: &#x27;Missing Square Bracket in Command&#x27;, 4: &#x27;Function Not Available (Possible missing parameter)&#x27;, 5: &#x27;Parameter Name Is Incorrect&#x27;, 6: &#x27;Parameter Set Is Incomplete&#x27;, 7: &#x27;File Parameter Is Incorrectly Formatted&#x27;, 8: &#x27;File(s) Missing Or Corrupt&#x27;, 9: &#x27;Opus Could Not Complete The Command&#x27;}"}, {"fullname": "brukeropus.control.opus.Opus", "modulename": "brukeropus.control.opus", "qualname": "Opus", "kind": "class", "doc": "<p>Class for communicating with currently running OPUS software using DDE interface.  Class automatically attempts\nto connect to OPUS software upon initialization.</p>\n"}, {"fullname": "brukeropus.control.opus.Opus.dde", "modulename": "brukeropus.control.opus", "qualname": "Opus.dde", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "brukeropus.control.opus.Opus.connected", "modulename": "brukeropus.control.opus", "qualname": "Opus.connected", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "brukeropus.control.opus.Opus.error_string", "modulename": "brukeropus.control.opus", "qualname": "Opus.error_string", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Error&#x27;"}, {"fullname": "brukeropus.control.opus.Opus.connect", "modulename": "brukeropus.control.opus", "qualname": "Opus.connect", "kind": "function", "doc": "<p>Connects class to OPUS software through the DDE interface.  Sets the <code>connected</code> attribute to <code>True</code> if\nsuccessful.  By default, initializing an <code>Opus</code> class will automatically attempt to connect to OPUS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.disconnect", "modulename": "brukeropus.control.opus", "qualname": "Opus.disconnect", "kind": "function", "doc": "<p>Disconnects DDE client/server connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.raw_query", "modulename": "brukeropus.control.opus", "qualname": "Opus.raw_query", "kind": "function", "doc": "<p>Sends command/request string (<code>req_str</code>) to OPUS and returns the response in byte format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>req_str:</strong>  The request string to send to OPUS over DDE</li>\n<li><strong>timeout:</strong>  timeout in milliseconds.  If a response is not recieved within the timeout period, an exception is\nraised.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: response from OPUS software through DDE request in bytes format.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">req_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.parse_response", "modulename": "brukeropus.control.opus", "qualname": "Opus.parse_response", "kind": "function", "doc": "<p>Parses the byte response from a raw DDE request query.  If an error is detected in the request, an Exception\nis raised.  If successful, a boolean, string or list of strings will be returned as appropriate.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>byte_response:</strong>  response from OPUS software through DDE request in bytes format.</li>\n<li><strong>decode:</strong>  format used to decode bytes into string (e.g. 'ascii' or 'utf-8')</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: parsed response from OPUS software (bool, string, or list of strings depending on request)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">byte_response</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">decode</span><span class=\"o\">=</span><span class=\"s1\">&#39;ascii&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.query", "modulename": "brukeropus.control.opus", "qualname": "Opus.query", "kind": "function", "doc": "<p>Sends a command/request and returns the parsed response.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>req_str:</strong>  The request string to send to OPUS over DDE</li>\n<li><strong>timeout:</strong>  timeout in milliseconds.  If a response is not recieved within the timeout period, an exception is\nraised.</li>\n<li><strong>decode:</strong>  format used to decode bytes into string (e.g. 'ascii' or 'utf-8')</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: parsed response from OPUS software (bool, string, or list of strings depending on request)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">req_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10000</span>, </span><span class=\"param\"><span class=\"n\">decode</span><span class=\"o\">=</span><span class=\"s1\">&#39;ascii&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.close_opus", "modulename": "brukeropus.control.opus", "qualname": "Opus.close_opus", "kind": "function", "doc": "<p>Closes the OPUS application. Returns <code>True</code> if successful.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.get_param_label", "modulename": "brukeropus.control.opus", "qualname": "Opus.get_param_label", "kind": "function", "doc": "<p>Get the label for a three character parameter code (e.g. BMS, APT, DTC, etc...).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>param:</strong>  three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>label: short descriptive label that defines the parameter</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.get_param_options", "modulename": "brukeropus.control.opus", "qualname": "Opus.get_param_options", "kind": "function", "doc": "<p>Get the parameter setting options for a three character parameter code. Only valid for\nenum type parameters (e.g. BMS, APT, DTC, etc...).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>param:</strong>  three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>options: list of valid options (strings) for the given parameter</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.get_version", "modulename": "brukeropus.control.opus", "qualname": "Opus.get_version", "kind": "function", "doc": "<p>Get the OPUS software version information</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.get_opus_path", "modulename": "brukeropus.control.opus", "qualname": "Opus.get_opus_path", "kind": "function", "doc": "<p>Get the absolute path to the OPUS software directory (where PARAMTEXT.bin and other instrument specific files\nare located)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.send_command", "modulename": "brukeropus.control.opus", "qualname": "Opus.send_command", "kind": "function", "doc": "<p>Used to send \"Direct Commands\" to the optics bench. Useful for manually moving motors, etc. from accessories\nand other low-level operations such as controlling the scanning mirror movement.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>send_command('VAC=5') # vents the sample compartment\n  send_command('VAC=4') # evacuates sample compartment</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>text_command:</strong>  string command as you would enter into \"Direct Command\" input of OPUS</li>\n<li><strong>timeout:</strong>  timeout in milliseconds to wait for response</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: parsed response from OPUS software (typically boolean confirmation)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text_command</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.evacuate_sample", "modulename": "brukeropus.control.opus", "qualname": "Opus.evacuate_sample", "kind": "function", "doc": "<p>Evacuates the sample compartment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.vent_sample", "modulename": "brukeropus.control.opus", "qualname": "Opus.vent_sample", "kind": "function", "doc": "<p>Vents the sample compartment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.close_flaps", "modulename": "brukeropus.control.opus", "qualname": "Opus.close_flaps", "kind": "function", "doc": "<p>Closes vacumm flaps between optics bench and sample compartment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.open_flaps", "modulename": "brukeropus.control.opus", "qualname": "Opus.open_flaps", "kind": "function", "doc": "<p>Opens vacumm flaps between optics bench and sample compartment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.unload_file", "modulename": "brukeropus.control.opus", "qualname": "Opus.unload_file", "kind": "function", "doc": "<p>Unloads a file from the OPUS software from its <code>filepath</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath:</strong>  full path of the file to be unloaded in the software.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: <code>True</code> if successful.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.unload_all", "modulename": "brukeropus.control.opus", "qualname": "Opus.unload_all", "kind": "function", "doc": "<p>Unloads all files from OPUS software</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.measure_ref", "modulename": "brukeropus.control.opus", "qualname": "Opus.measure_ref", "kind": "function", "doc": "<p>Takes a reference measurement using the current settings from advanced experiment.  Also\ntakes option **kwargs input which use the OPUS 3-letter parameter keys and values as input\nto customize the measurement.  example:</p>\n\n<pre><code>measure_ref(nrs=100, res=4) # measures reference with current settings but overriding averages to 100 and\n    resolution to 4\n</code></pre>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeout:</strong>  timeout in milliseconds to wait for response</li>\n<li><strong>kwargs:</strong>  any valid three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: <code>True</code> if successful</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1000000</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.measure_sample", "modulename": "brukeropus.control.opus", "qualname": "Opus.measure_sample", "kind": "function", "doc": "<p>Takes a reference measurement using the current settings from advanced experiment.  Also\ntakes option **kwargs input which use the OPUS 3-letter parameter keys and values as input\nto customize the measurement.  example:</p>\n\n<pre><code>measure_sample(nss=100, res=4) # measures sample with current settings but overriding averages to 100 and\n    resolution to 4\n</code></pre>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unload:</strong>  whether to unload the file from OPUS after measurement is complete (to allow moving/renaming, etc.)</li>\n<li><strong>timeout:</strong>  timeout in milliseconds to wait for response</li>\n<li><strong>kwargs:</strong>  any valid three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>filepath: absolute filepath to measured sample file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unload</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1000000</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.check_signal", "modulename": "brukeropus.control.opus", "qualname": "Opus.check_signal", "kind": "function", "doc": "<p>Performs a quick (typically 1 sample) measurement using the current FTIR settings. Current settings can be\noverridden using **kwargs. After measurement is finished, the file is unloaded from OPUS and deleted. The\nfunction returns an <code>OPUSFile</code> object before it deletes the quick measurement file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nss:</strong>  number of sample scans to average (default is 1, i.e. no averaging)</li>\n<li><strong>kwargs:</strong>  any valid three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>opus_file: <code>OPUSFile</code> object generated by quick measurement</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nss</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.save_ref", "modulename": "brukeropus.control.opus", "qualname": "Opus.save_ref", "kind": "function", "doc": "<p>Saves current reference to file (according to current filename and path set in advanced experiment) and\nreturns the filename.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>filepath: absolute path to saved reference file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file", "modulename": "brukeropus.file", "kind": "module", "doc": "<p>The <code>brukeropus.file</code> submodule of <code>brukeropus</code> includes all the functions and classes for reading and exploring OPUS\nfiles. This includes both high-level functions like <code>read_opus</code> that returns an <code>OPUSFile</code> class, as well as low-level\nparsing functions like <code>parse_directory</code> that returns data extracted directly from the binary OPUS file bytes.  This\noverview documentation will focus on the high-level functions which will be useful for most users.  If you are\ninterested in using the low-level parsing functions, perhaps to make your own data class or customize how files are\nread, refer to: <code>brukeropus.file.parser</code> which contains all the low-level parsing functions.</p>\n\n<h2 id=\"finding-opus-files\">Finding OPUS Files</h2>\n\n<p>OPUS files are typically saved with a numeric file extension (e.g. file.0, file.1, file.1001).  This makes searching for\na list of OPUS files in a directory a little more cumbersome than a traditional \"*.csv\" search.  To address this,\n<code>brukeropus</code> includes a <code>find_opus_files</code> function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">find_opus_files</span>\n\n<span class=\"n\">filepaths</span> <span class=\"o\">=</span> <span class=\"n\">find_opus_files</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;path\\to\\opus\\files&#39;</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Which will assign a list of filepaths that match the numeric extension formatting of OPUS files. For full documentation,\nsee <code>brukeropus.file.utils.find_opus_files</code>.</p>\n\n<h2 id=\"reading-opus-files\">Reading OPUS Files</h2>\n\n<p><code>brukeropus</code> parses OPUS files and assembles them into an <code>OPUSFile</code> object that contains the extracted data (and\nmetadata) within the file.  You can generate an <code>OPUSFile</code> object in one of two ways:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">read_opus</span><span class=\"p\">,</span> <span class=\"n\">OPUSFile</span>\n\n<span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;path\\to\\opusfile.0&#39;</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n<span class=\"n\">same_data</span> <span class=\"o\">=</span> <span class=\"n\">OPUSFile</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>In the above code, <code>data</code> and <code>same_data</code> are both <code>OPUSFile</code> objects with identical data.</p>\n\n<h2 id=\"using-the-opusfile-class\">Using the <code>OPUSFile</code> Class</h2>\n\n<p>OPUS files all start with the same first four <em>magic bytes</em>.  If the file does not start with these bytes (i.e. is not\na valid OPUS file), the OPUSFile class will logically evaluate to <code>false</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.pdf&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is not an OPUS file&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>To view all parameter metadata in the file, you can print to the console using the class method: <code>print_parameters</code>.\nThis will let you view all the key, value parameter data extracted from the file with labels for what the parameter keys\nare referring to wherever known.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">print_parameters</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p><details>\n<summary>Example <code>print_parameters</code> Output</summary></p>\n\n<p>\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                         Optical Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">ACC    Accessory                               TRANS *010A984F</span>\n<span class=\"go\">APR    ATR Pressure                            0</span>\n<span class=\"go\">APT    Aperture Setting                        1 mm</span>\n<span class=\"go\">BMS    Beamsplitter                            KBr-Broadband</span>\n<span class=\"go\">CHN    Measurement Channel                     Sample Compartment</span>\n<span class=\"go\">DTC    Detector                                RT-DLaTGS [Internal Pos.1]</span>\n<span class=\"go\">HPF    High Pass Filter                        0</span>\n<span class=\"go\">LPF    Low Pass Filter                         10.0</span>\n<span class=\"go\">LPV    Variable Low Pass Filter (cm-1)         4000</span>\n<span class=\"go\">OPF    Optical Filter Setting                  Open</span>\n<span class=\"go\">PGN    Preamplifier Gain                       3</span>\n<span class=\"go\">RDX    Extended Ready Check                    0</span>\n<span class=\"go\">SRC    Source                                  MIR</span>\n<span class=\"go\">VEL    Scanner Velocity                        10.0</span>\n<span class=\"go\">ADC    External Analog Signals                 0</span>\n<span class=\"go\">SON    External Sync                           Off</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                    Fourier Transform Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">APF    Apodization Function                    B3</span>\n<span class=\"go\">HFQ    End Frequency Limit for File            500.0</span>\n<span class=\"go\">LFQ    Start Frequency Limit for File          10000.0</span>\n<span class=\"go\">NLI    Nonlinearity Correction                 0</span>\n<span class=\"go\">PHR    Phase Resolution                        100.0</span>\n<span class=\"go\">PHZ    Phase Correction Mode                   ML</span>\n<span class=\"go\">SPZ    Stored Phase Mode                       NO</span>\n<span class=\"go\">ZFF    Zero Filling Factor                     2</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                       Acquisition Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">ADT    Additional Data Treatment               0</span>\n<span class=\"go\">AQM    Acquisition Mode                        DD</span>\n<span class=\"go\">CFE    Low Intensity Power Mode with DTGS      0</span>\n<span class=\"go\">COR    Correlation Test Mode                   0</span>\n<span class=\"go\">DEL    Delay Before Measurement                0</span>\n<span class=\"go\">DLY    Stabilization Delay                     0</span>\n<span class=\"go\">HFW    Wanted High Freq Limit                  15000.0</span>\n<span class=\"go\">LFW    Wanted Low Freq Limit                   0.0</span>\n<span class=\"go\">NSS    Number of Sample Scans                  50</span>\n<span class=\"go\">PLF    Result Spectrum Type                    AB</span>\n<span class=\"go\">RES    Resolution (cm-1)                       4.0</span>\n<span class=\"go\">SOT    Sample Scans or Time                    0</span>\n<span class=\"go\">TCL    Command Line for Additional Data Tr...</span>\n<span class=\"go\">TDL    To Do List                              16777271</span>\n<span class=\"go\">SGN    Sample Signal Gain                      1</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                      Sample Origin Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">BLD    Building</span>\n<span class=\"go\">CNM    Operator Name                           Duran</span>\n<span class=\"go\">CPY    Company</span>\n<span class=\"go\">DPM    Department</span>\n<span class=\"go\">EXP    Experiment                              MWIR-LWIR_Trans_FileNameFormat.XPM</span>\n<span class=\"go\">LCT    Location</span>\n<span class=\"go\">SFM    Sample Form                             Atm-MWIR (All A)</span>\n<span class=\"go\">SNM    Sample Name                             File Test</span>\n<span class=\"go\">XPP    Experiment Path                         C:\\Users\\Public\\Documents\\Bruker\\OPUS_8.1.29\\XPM</span>\n<span class=\"go\">IST    Instrument Status                       OK</span>\n<span class=\"go\">CPG    Character Encoding Code Page            1252</span>\n<span class=\"go\">UID    Universally Unique Identifier           0d1348c2-3a2c-41c9-b521-bdaf0a23710c</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                    Instrument Status Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">HFL    High Folding Limit                      15795.820598</span>\n<span class=\"go\">LFL    Low Folding Limit                       0.0</span>\n<span class=\"go\">LWN    Laser Wavenumber                        15795.820598</span>\n<span class=\"go\">ABP    Absolute Peak Pos in Laser*2            52159</span>\n<span class=\"go\">SSP    Sample Spacing Divisor                  1</span>\n<span class=\"go\">ASG    Actual Signal Gain                      1</span>\n<span class=\"go\">ARG    Actual Reference Gain                   1</span>\n<span class=\"go\">ASS    Number of Sample Scans                  50</span>\n<span class=\"go\">GFW    Number of Good Forward Scans            25</span>\n<span class=\"go\">GBW    Number of Good Backward Scans           25</span>\n<span class=\"go\">BFW    Number of Bad Forward Scans             0</span>\n<span class=\"go\">BBW    Number of Bad Backward Scans            0</span>\n<span class=\"go\">PKA    Peak Amplitude                          1409</span>\n<span class=\"go\">PKL    Peak Location                           7364</span>\n<span class=\"go\">PRA    Backward Peak Amplitude                 1356</span>\n<span class=\"go\">PRL    Backward Peak Location                  7363</span>\n<span class=\"go\">P2A    Peak Amplitude Channel 2                1</span>\n<span class=\"go\">P2L    Peak Location Channel 2                 1</span>\n<span class=\"go\">P2R    Backward Peak Amplitude Channel 2       1</span>\n<span class=\"go\">P2K    Backward Peak Location Channel 2        1</span>\n<span class=\"go\">DAQ    Data Acquisition Status                 0</span>\n<span class=\"go\">AG2    Actual Signal Gain Channel 2            1</span>\n<span class=\"go\">HUM    Relative Humidity Interferometer        14</span>\n<span class=\"go\">SSM    Sample Spacing Multiplier               1</span>\n<span class=\"go\">RSN    Running Sample Number                   565</span>\n<span class=\"go\">CRR    Correlation Rejection Reason            0</span>\n<span class=\"go\">SRT    Start Time (sec)                        1556890484.642</span>\n<span class=\"go\">DUR    Duration (sec)                          42.433990478515625</span>\n<span class=\"go\">TSC    Scanner Temperature                     27.8</span>\n<span class=\"go\">MVD    Max Velocity Deviation                  0.1158025860786438</span>\n<span class=\"go\">PRS    Pressure Interferometer (hPa)           1009.9999700000001</span>\n<span class=\"go\">AN1    Analog Signal 1                         0.22596596493037535</span>\n<span class=\"go\">AN2    Analog Signal 2                         3.459206583321489</span>\n<span class=\"go\">VSN    Firmware Version                        2.450 Oct 10 2014</span>\n<span class=\"go\">SRN    Instrument Serial Number                1135</span>\n<span class=\"go\">CAM    Coaddition Mode                         0</span>\n<span class=\"go\">INS    Instrument Type                         VERTEX 80V</span>\n<span class=\"go\">FOC    Focal Length                            100.0</span>\n<span class=\"go\">RDY    Ready Check                             1</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                               Reference Instrument Status Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">HFL    High Folding Limit                      15795.820598</span>\n<span class=\"go\">LFL    Low Folding Limit                       0.0</span>\n<span class=\"go\">LWN    Laser Wavenumber                        15795.820598</span>\n<span class=\"go\">ABP    Absolute Peak Pos in Laser*2            52159</span>\n<span class=\"go\">SSP    Sample Spacing Divisor                  1</span>\n<span class=\"go\">ARG    Actual Reference Gain                   1</span>\n<span class=\"go\">ASG    Actual Signal Gain                      1</span>\n<span class=\"go\">ASS    Number of Sample Scans                  1</span>\n<span class=\"go\">GFW    Number of Good Forward Scans            1</span>\n<span class=\"go\">GBW    Number of Good Backward Scans           0</span>\n<span class=\"go\">BFW    Number of Bad Forward Scans             0</span>\n<span class=\"go\">BBW    Number of Bad Backward Scans            0</span>\n<span class=\"go\">PKA    Peak Amplitude                          1644</span>\n<span class=\"go\">PKL    Peak Location                           7364</span>\n<span class=\"go\">PRA    Backward Peak Amplitude                 1</span>\n<span class=\"go\">PRL    Backward Peak Location                  -1</span>\n<span class=\"go\">P2A    Peak Amplitude Channel 2                1</span>\n<span class=\"go\">P2L    Peak Location Channel 2                 1</span>\n<span class=\"go\">P2R    Backward Peak Amplitude Channel 2       1</span>\n<span class=\"go\">P2K    Backward Peak Location Channel 2        1</span>\n<span class=\"go\">DAQ    Data Acquisition Status                 0</span>\n<span class=\"go\">AG2    Actual Signal Gain Channel 2            1</span>\n<span class=\"go\">HUM    Relative Humidity Interferometer        0</span>\n<span class=\"go\">SSM    Sample Spacing Multiplier               1</span>\n<span class=\"go\">RSN    Running Sample Number                   5816</span>\n<span class=\"go\">CRR    Correlation Rejection Reason            0</span>\n<span class=\"go\">SRT    Start Time (sec)                        1556890282.358</span>\n<span class=\"go\">DUR    Duration (sec)                          0.7919998168945312</span>\n<span class=\"go\">TSC    Scanner Temperature                     27.8</span>\n<span class=\"go\">MVD    Max Velocity Deviation                  0.10553144663572311</span>\n<span class=\"go\">PRS    Pressure Interferometer (hPa)           2.01999</span>\n<span class=\"go\">AN1    Analog Signal 1                         0.22577181458473206</span>\n<span class=\"go\">AN2    Analog Signal 2                         4.0960001945495605</span>\n<span class=\"go\">VSN    Firmware Version                        2.450 Oct 10 2014</span>\n<span class=\"go\">SRN    Instrument Serial Number                1135</span>\n<span class=\"go\">CAM    Coaddition Mode                         0</span>\n<span class=\"go\">INS    Instrument Type                         VERTEX 80V</span>\n<span class=\"go\">FOC    Focal Length                            100.0</span>\n<span class=\"go\">RDY    Ready Check                             1</span>\n<span class=\"go\">ARS    Number of Reference Scans               1</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                    Reference Optical Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">ACC    Accessory                               TRANS *010A984F</span>\n<span class=\"go\">APR    ATR Pressure                            0</span>\n<span class=\"go\">APT    Aperture Setting                        1 mm</span>\n<span class=\"go\">BMS    Beamsplitter                            KBr-Broadband</span>\n<span class=\"go\">DTC    Detector                                RT-DLaTGS [Internal Pos.1]</span>\n<span class=\"go\">HPF    High Pass Filter                        0</span>\n<span class=\"go\">LPF    Low Pass Filter                         10.0</span>\n<span class=\"go\">LPV    Variable Low Pass Filter (cm-1)         4000</span>\n<span class=\"go\">OPF    Optical Filter Setting                  Open</span>\n<span class=\"go\">PGR    Reference Preamplifier Gain             3</span>\n<span class=\"go\">RCH    Reference Measurement Channel           Sample Compartment</span>\n<span class=\"go\">RDX    Extended Ready Check                    0</span>\n<span class=\"go\">SRC    Source                                  MIR</span>\n<span class=\"go\">VEL    Scanner Velocity                        10.0</span>\n<span class=\"go\">ADC    External Analog Signals                 0</span>\n<span class=\"go\">SON    External Sync                           Off</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                  Reference Acquisition Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">ADT    Additional Data Treatment               0</span>\n<span class=\"go\">AQM    Acquisition Mode                        DD</span>\n<span class=\"go\">CFE    Low Intensity Power Mode with DTGS      0</span>\n<span class=\"go\">COR    Correlation Test Mode                   0</span>\n<span class=\"go\">DEL    Delay Before Measurement                0</span>\n<span class=\"go\">DLY    Stabilization Delay                     0</span>\n<span class=\"go\">HFW    Wanted High Freq Limit                  15000.0</span>\n<span class=\"go\">LFW    Wanted Low Freq Limit                   0.0</span>\n<span class=\"go\">NSR    Number of Background Scans              1</span>\n<span class=\"go\">PLF    Result Spectrum Type                    TR</span>\n<span class=\"go\">RES    Resolution (cm-1)                       4.0</span>\n<span class=\"go\">RGN    Reference Signal Gain                   1</span>\n<span class=\"go\">STR    Scans or Time (Reference)               0</span>\n<span class=\"go\">TCL    Command Line for Additional Data Tr...</span>\n<span class=\"go\">TDL    To Do List                              16777271</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                               Reference Fourier Transform Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">APF    Apodization Function                    B3</span>\n<span class=\"go\">HFQ    End Frequency Limit for File            500.0</span>\n<span class=\"go\">LFQ    Start Frequency Limit for File          10000.0</span>\n<span class=\"go\">NLI    Nonlinearity Correction                 0</span>\n<span class=\"go\">PHR    Phase Resolution                        100.0</span>\n<span class=\"go\">PHZ    Phase Correction Mode                   ML</span>\n<span class=\"go\">SPZ    Stored Phase Mode                       NO</span>\n<span class=\"go\">ZFF    Zero Filling Factor                     2</span>\n</code></pre>\n</div>\n\n</p>\n\n<p></details></p>\n\n<p>You can access a specific parameter simply by calling the key as a direct attribute of the class (case insensitive). You\ncan also get the human-readable label using the <code>get_param_label</code> function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus.file</span> <span class=\"kn\">import</span> <span class=\"n\">get_param_label</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_param_label</span><span class=\"p\">(</span><span class=\"s1\">&#39;bms&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bms</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_param_label</span><span class=\"p\">(</span><span class=\"s1\">&#39;src&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">Beamsplitter: KBr-Broadband</span>\n<span class=\"go\">Source: MIR</span>\n</code></pre>\n</div>\n\n<p>You will notice in the example output that some keys (e.g. zero filling factor <code>zff</code>) may have two entries: one for the\nsample measurement and another for the reference.  By default, the sample parameters are accessible directly from the\n<code>OPUSFile</code> class, while the reference parameters can be accessed through the <code>rf_params</code> attribute.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Sample ZFF:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">zff</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Reference ZFF:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">rf_params</span><span class=\"o\">.</span><span class=\"n\">zff</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">Sample ZFF: 2 Reference ZFF: 2</span>\n</code></pre>\n</div>\n\n<p>You can also iterate over the parameters using the familiar <code>keys()</code>, <code>values()</code>, and <code>items()</code> functions using the\n<code>params</code> or <code>rf_params</code> attributes:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">acc: TRANS *010A984F</span>\n<span class=\"go\">apr: 0</span>\n<span class=\"go\">apt: 1 mm</span>\n<span class=\"go\">bms: KBr-Broadband</span>\n<span class=\"go\">chn: Sample Compartment</span>\n<span class=\"go\">dtc: RT-DLaTGS [Internal Pos.1]</span>\n<span class=\"go\">hpf: 0</span>\n<span class=\"go\">lpf: 10.0</span>\n<span class=\"go\">lpv: 4000</span>\n<span class=\"go\">opf: Open</span>\n<span class=\"go\">pgn: 3</span>\n<span class=\"go\">... continued ...</span>\n</code></pre>\n</div>\n\n<p>Depending on the settings used to save the OPUS file, different data blocks can be stored.  To retrieve a list of data\nblocks stored in the OPUS File, use the <code>data_keys</code> attribute:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data_keys</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">[&#39;igsm&#39;, &#39;phsm&#39;, &#39;sm&#39;, &#39;a&#39;, &#39;igrf&#39;, &#39;rf&#39;]</span>\n</code></pre>\n</div>\n\n<p>Each key is also an attribute of the <code>OPUSFile</code> instance that returns either a <code>Data</code> or <code>Data3D</code> class.  You can get\nthe <code>x</code> and <code>y</code> array values (in the units they were saved in) as direct attributes to the <code>Data</code> class:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>For spectra with wavenumber as valid unit (e.g. single-channel or ratioed spectra), the <code>x</code> array can be given in <code>cm\u207b\u00b9</code>\nor <code>\u00b5m</code> units by using the attributes <code>wn</code> or <code>wl</code> respectively:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">wl</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>You can also iterate over all data spectra in the file using the <code>iter_data()</code> method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">iter_data</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"s1\">&#39;(&#39;</span> <span class=\"o\">+</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;)&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">Sample Interferogram (2019-05-03 13:34:44.641000)</span>\n<span class=\"go\">Sample Phase (2019-05-03 13:34:44.641000)</span>\n<span class=\"go\">Sample Spectrum (2019-05-03 13:34:44.641000)</span>\n<span class=\"go\">Absorbance (2019-05-03 13:34:44.641000)</span>\n<span class=\"go\">Reference Interferogram (2019-05-03 13:31:22.358000)</span>\n<span class=\"go\">Reference Spectrum (2019-05-03 13:31:22.358000)</span>\n</code></pre>\n</div>\n\n<p>Each data block in an OPUS file also contains a small parameter block with information such as the min/max y-value\n(mny, mxy), x-units (dxu), number of data points (npt), etc.  These can be accessed as direct attributes to the <code>Data</code>\nclass, or through the <code>params</code> attribute:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Sample spectra y-min:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">mny</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y-max:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">mxy</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">Sample spectra y-min: 1.2147593224653974e-05 y-max: 0.03543896973133087</span>\n</code></pre>\n</div>\n\n<p>For full API documentation, see: <br />\n<code>OPUSFile</code>: <code>brukeropus.file.file.OPUSFile</code> <br />\n<code>Data</code>: <code>brukeropus.file.file.Data</code> <br />\n<code>Data3D</code>: <code>brukeropus.file.file.Data3D</code></p>\n"}, {"fullname": "brukeropus.file.constants", "modulename": "brukeropus.file.constants", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.constants.PARAM_LABELS", "modulename": "brukeropus.file.constants", "qualname": "PARAM_LABELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ACC&#x27;: &#x27;Accessory&#x27;, &#x27;ABP&#x27;: &#x27;Absolute Peak Pos in Laser*2&#x27;, &#x27;ADC&#x27;: &#x27;External Analog Signals&#x27;, &#x27;ADT&#x27;: &#x27;Additional Data Treatment&#x27;, &#x27;AG2&#x27;: &#x27;Actual Signal Gain Channel 2&#x27;, &#x27;AN1&#x27;: &#x27;Analog Signal 1&#x27;, &#x27;AN2&#x27;: &#x27;Analog Signal 2&#x27;, &#x27;APF&#x27;: &#x27;Apodization Function&#x27;, &#x27;APR&#x27;: &#x27;ATR Pressure&#x27;, &#x27;APT&#x27;: &#x27;Aperture Setting&#x27;, &#x27;AQM&#x27;: &#x27;Acquisition Mode&#x27;, &#x27;ARG&#x27;: &#x27;Actual Reference Gain&#x27;, &#x27;ARS&#x27;: &#x27;Number of Reference Scans&#x27;, &#x27;ASG&#x27;: &#x27;Actual Signal Gain&#x27;, &#x27;ASS&#x27;: &#x27;Number of Sample Scans&#x27;, &#x27;BBW&#x27;: &#x27;Number of Bad Backward Scans&#x27;, &#x27;BFW&#x27;: &#x27;Number of Bad Forward Scans&#x27;, &#x27;BLD&#x27;: &#x27;Building&#x27;, &#x27;BMS&#x27;: &#x27;Beamsplitter&#x27;, &#x27;CAM&#x27;: &#x27;Coaddition Mode&#x27;, &#x27;CFE&#x27;: &#x27;Low Intensity Power Mode with DTGS&#x27;, &#x27;CHN&#x27;: &#x27;Measurement Channel&#x27;, &#x27;CNM&#x27;: &#x27;Operator Name&#x27;, &#x27;COR&#x27;: &#x27;Correlation Test Mode&#x27;, &#x27;CPG&#x27;: &#x27;Character Encoding Code Page&#x27;, &#x27;CPY&#x27;: &#x27;Company&#x27;, &#x27;CRR&#x27;: &#x27;Correlation Rejection Reason&#x27;, &#x27;CSF&#x27;: &#x27;Y Scaling Factor&#x27;, &#x27;DAQ&#x27;: &#x27;Data Acquisition Status&#x27;, &#x27;DAT&#x27;: &#x27;Date of Measurement&#x27;, &#x27;DEL&#x27;: &#x27;Delay Before Measurement&#x27;, &#x27;DLY&#x27;: &#x27;Stabilization Delay&#x27;, &#x27;DPF&#x27;: &#x27;Data Point Format&#x27;, &#x27;DPM&#x27;: &#x27;Department&#x27;, &#x27;DTC&#x27;: &#x27;Detector&#x27;, &#x27;DUR&#x27;: &#x27;Duration (sec)&#x27;, &#x27;DXU&#x27;: &#x27;X Units&#x27;, &#x27;DYU&#x27;: &#x27;Y Units&#x27;, &#x27;EXP&#x27;: &#x27;Experiment&#x27;, &#x27;FOC&#x27;: &#x27;Focal Length&#x27;, &#x27;FXV&#x27;: &#x27;First X Value&#x27;, &#x27;GBW&#x27;: &#x27;Number of Good Backward Scans&#x27;, &#x27;GFW&#x27;: &#x27;Number of Good Forward Scans&#x27;, &#x27;HFF&#x27;: &#x27;Digital Filter High Folding Limit&#x27;, &#x27;HFL&#x27;: &#x27;High Folding Limit&#x27;, &#x27;HFQ&#x27;: &#x27;End Frequency Limit for File&#x27;, &#x27;HFW&#x27;: &#x27;Wanted High Freq Limit&#x27;, &#x27;HPF&#x27;: &#x27;High Pass Filter&#x27;, &#x27;HUM&#x27;: &#x27;Relative Humidity Interferometer&#x27;, &#x27;INS&#x27;: &#x27;Instrument Type&#x27;, &#x27;IST&#x27;: &#x27;Instrument Status&#x27;, &#x27;LCT&#x27;: &#x27;Location&#x27;, &#x27;LFF&#x27;: &#x27;Digital Filter Low Folding Limit&#x27;, &#x27;LFL&#x27;: &#x27;Low Folding Limit&#x27;, &#x27;LFQ&#x27;: &#x27;Start Frequency Limit for File&#x27;, &#x27;LFW&#x27;: &#x27;Wanted Low Freq Limit&#x27;, &#x27;LPF&#x27;: &#x27;Low Pass Filter&#x27;, &#x27;LPV&#x27;: &#x27;Variable Low Pass Filter (cm-1)&#x27;, &#x27;LWN&#x27;: &#x27;Laser Wavenumber&#x27;, &#x27;LXV&#x27;: &#x27;Last X Value&#x27;, &#x27;MNY&#x27;: &#x27;Y Minimum&#x27;, &#x27;MVD&#x27;: &#x27;Max Velocity Deviation&#x27;, &#x27;MXY&#x27;: &#x27;Y Maximum&#x27;, &#x27;NFL&#x27;: &#x27;Nominal FW Peak Pos in Points&#x27;, &#x27;NLA&#x27;: &#x27;NL Alpha&#x27;, &#x27;NLB&#x27;: &#x27;NL Beta&#x27;, &#x27;NLI&#x27;: &#x27;Nonlinearity Correction&#x27;, &#x27;NPT&#x27;: &#x27;Number of Data Points&#x27;, &#x27;NSN&#x27;: &#x27;Scan Number&#x27;, &#x27;NSR&#x27;: &#x27;Number of Background Scans&#x27;, &#x27;NSS&#x27;: &#x27;Number of Sample Scans&#x27;, &#x27;OPF&#x27;: &#x27;Optical Filter Setting&#x27;, &#x27;P2A&#x27;: &#x27;Peak Amplitude Channel 2&#x27;, &#x27;P2K&#x27;: &#x27;Backward Peak Location Channel 2&#x27;, &#x27;P2L&#x27;: &#x27;Peak Location Channel 2&#x27;, &#x27;P2R&#x27;: &#x27;Backward Peak Amplitude Channel 2&#x27;, &#x27;PGN&#x27;: &#x27;Preamplifier Gain&#x27;, &#x27;PGR&#x27;: &#x27;Reference Preamplifier Gain&#x27;, &#x27;PHR&#x27;: &#x27;Phase Resolution&#x27;, &#x27;PHZ&#x27;: &#x27;Phase Correction Mode&#x27;, &#x27;PKA&#x27;: &#x27;Peak Amplitude&#x27;, &#x27;PKL&#x27;: &#x27;Peak Location&#x27;, &#x27;PLF&#x27;: &#x27;Result Spectrum Type&#x27;, &#x27;PRA&#x27;: &#x27;Backward Peak Amplitude&#x27;, &#x27;PRL&#x27;: &#x27;Backward Peak Location&#x27;, &#x27;PRS&#x27;: &#x27;Pressure Interferometer (hPa)&#x27;, &#x27;RCH&#x27;: &#x27;Reference Measurement Channel&#x27;, &#x27;RDX&#x27;: &#x27;Extended Ready Check&#x27;, &#x27;RDY&#x27;: &#x27;Ready Check&#x27;, &#x27;RES&#x27;: &#x27;Resolution (cm-1)&#x27;, &#x27;RG2&#x27;: &#x27;Signal Gain, Background 2nd Channel&#x27;, &#x27;RGN&#x27;: &#x27;Reference Signal Gain&#x27;, &#x27;RSN&#x27;: &#x27;Running Sample Number&#x27;, &#x27;SFM&#x27;: &#x27;Sample Form&#x27;, &#x27;SG2&#x27;: &#x27;Signal Gain, Sample 2nd Channel&#x27;, &#x27;SGN&#x27;: &#x27;Sample Signal Gain&#x27;, &#x27;SNM&#x27;: &#x27;Sample Name&#x27;, &#x27;SON&#x27;: &#x27;External Sync&#x27;, &#x27;SOT&#x27;: &#x27;Sample Scans or Time&#x27;, &#x27;SPO&#x27;: &#x27;Sample Number&#x27;, &#x27;SPZ&#x27;: &#x27;Stored Phase Mode&#x27;, &#x27;SRC&#x27;: &#x27;Source&#x27;, &#x27;SRN&#x27;: &#x27;Instrument Serial Number&#x27;, &#x27;SRT&#x27;: &#x27;Start Time (sec)&#x27;, &#x27;SSM&#x27;: &#x27;Sample Spacing Multiplier&#x27;, &#x27;SSP&#x27;: &#x27;Sample Spacing Divisor&#x27;, &#x27;STR&#x27;: &#x27;Scans or Time (Reference)&#x27;, &#x27;TCL&#x27;: &#x27;Command Line for Additional Data Treatment&#x27;, &#x27;TDL&#x27;: &#x27;To Do List&#x27;, &#x27;TIM&#x27;: &#x27;Time of Measurement&#x27;, &#x27;TPX&#x27;: &#x27;Total Points X&#x27;, &#x27;TSC&#x27;: &#x27;Scanner Temperature&#x27;, &#x27;UID&#x27;: &#x27;Universally Unique Identifier&#x27;, &#x27;VEL&#x27;: &#x27;Scanner Velocity&#x27;, &#x27;VSN&#x27;: &#x27;Firmware Version&#x27;, &#x27;WAS&#x27;: &#x27;Tr.Rec. Slices&#x27;, &#x27;WDV&#x27;: &#x27;Transient Recorder&#x27;, &#x27;WIB&#x27;: &#x27;Tr.Rec.Input Range 2nd channel&#x27;, &#x27;WIR&#x27;: &#x27;Tr.Rec.Input Range&#x27;, &#x27;WPD&#x27;: &#x27;Tr.Rec. Stab. Delay after Stepping&#x27;, &#x27;WRC&#x27;: &#x27;Tr.Rec. Repeat Count&#x27;, &#x27;WSS&#x27;: &#x27;Tr.Rec. Sampling Source&#x27;, &#x27;WTD&#x27;: &#x27;Tr.Rec. trigger Delay in points&#x27;, &#x27;WTR&#x27;: &#x27;Tr.Rec. Resolution&#x27;, &#x27;WXD&#x27;: &#x27;Tr.Rec. Experiment Delay&#x27;, &#x27;WXP&#x27;: &#x27;Tr.Rec. Trigger Mode&#x27;, &#x27;XPP&#x27;: &#x27;Experiment Path&#x27;, &#x27;XSM&#x27;: &#x27;Xs Sampling Mode&#x27;, &#x27;ZFF&#x27;: &#x27;Zero Filling Factor&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_0", "modulename": "brukeropus.file.constants", "qualname": "CODE_0", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Real Part of Complex Data&#x27;, 2: &#x27;Imaginary Part of Complex Data&#x27;, 3: &#x27;&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_1", "modulename": "brukeropus.file.constants", "qualname": "CODE_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Sample&#x27;, 2: &#x27;Reference&#x27;, 3: &#x27;&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_2", "modulename": "brukeropus.file.constants", "qualname": "CODE_2", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Data Status Parameters&#x27;, 2: &#x27;Instrument Status Parameters&#x27;, 3: &#x27;Acquisition Parameters&#x27;, 4: &#x27;Fourier Transform Parameters&#x27;, 5: &#x27;Plot and Display Parameters&#x27;, 6: &#x27;Optical Parameters&#x27;, 7: &#x27;GC Parameters&#x27;, 8: &#x27;Library Search Parameters&#x27;, 9: &#x27;Communication Parameters&#x27;, 10: &#x27;Sample Origin Parameters&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_3", "modulename": "brukeropus.file.constants", "qualname": "CODE_3", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Spectrum&#x27;, 2: &#x27;Interferogram&#x27;, 3: &#x27;Phase&#x27;, 4: &#x27;Absorbance&#x27;, 5: &#x27;Transmittance&#x27;, 6: &#x27;Kubelka-Munk&#x27;, 7: &#x27;Trace (Intensity over time)&#x27;, 8: &#x27;gc File, Series of Interferograms&#x27;, 9: &#x27;gc File, Series of Spectra&#x27;, 10: &#x27;Raman&#x27;, 11: &#x27;Emisson&#x27;, 12: &#x27;Reflectance&#x27;, 13: &#x27;Directory&#x27;, 14: &#x27;Power&#x27;, 15: &#x27;log Reflectance&#x27;, 16: &#x27;ATR&#x27;, 17: &#x27;Photoacoustic&#x27;, 18: &#x27;Result of Arithmatics, looks like Transmittance&#x27;, 19: &#x27;Result of Arithmatics, looks like Absorbance&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_4", "modulename": "brukeropus.file.constants", "qualname": "CODE_4", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;First Derivative&#x27;, 2: &#x27;Second Derivative&#x27;, 3: &#x27;n-th Derivative&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_5", "modulename": "brukeropus.file.constants", "qualname": "CODE_5", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Compound Information&#x27;, 2: &#x27;Peak Table&#x27;, 3: &#x27;Molecular Structure&#x27;, 4: &#x27;Macro&#x27;, 5: &#x27;File Log&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_3_ABR", "modulename": "brukeropus.file.constants", "qualname": "CODE_3_ABR", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;&#x27;, 2: &#x27;ig&#x27;, 3: &#x27;ph&#x27;, 4: &#x27;a&#x27;, 5: &#x27;t&#x27;, 6: &#x27;km&#x27;, 7: &#x27;tr&#x27;, 8: &#x27;gcig&#x27;, 9: &#x27;gcsc&#x27;, 10: &#x27;ra&#x27;, 11: &#x27;e&#x27;, 12: &#x27;r&#x27;, 13: &#x27;dir&#x27;, 14: &#x27;p&#x27;, 15: &#x27;logr&#x27;, 16: &#x27;atr&#x27;, 17: &#x27;pas&#x27;, 18: &#x27;arit&#x27;, 19: &#x27;aria&#x27;}"}, {"fullname": "brukeropus.file.constants.TYPE_CODE_LABELS", "modulename": "brukeropus.file.constants", "qualname": "TYPE_CODE_LABELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[{0: &#x27;&#x27;, 1: &#x27;Real Part of Complex Data&#x27;, 2: &#x27;Imaginary Part of Complex Data&#x27;, 3: &#x27;&#x27;}, {0: &#x27;&#x27;, 1: &#x27;Sample&#x27;, 2: &#x27;Reference&#x27;, 3: &#x27;&#x27;}, {0: &#x27;&#x27;, 1: &#x27;Data Status Parameters&#x27;, 2: &#x27;Instrument Status Parameters&#x27;, 3: &#x27;Acquisition Parameters&#x27;, 4: &#x27;Fourier Transform Parameters&#x27;, 5: &#x27;Plot and Display Parameters&#x27;, 6: &#x27;Optical Parameters&#x27;, 7: &#x27;GC Parameters&#x27;, 8: &#x27;Library Search Parameters&#x27;, 9: &#x27;Communication Parameters&#x27;, 10: &#x27;Sample Origin Parameters&#x27;}, {0: &#x27;&#x27;, 1: &#x27;Spectrum&#x27;, 2: &#x27;Interferogram&#x27;, 3: &#x27;Phase&#x27;, 4: &#x27;Absorbance&#x27;, 5: &#x27;Transmittance&#x27;, 6: &#x27;Kubelka-Munk&#x27;, 7: &#x27;Trace (Intensity over time)&#x27;, 8: &#x27;gc File, Series of Interferograms&#x27;, 9: &#x27;gc File, Series of Spectra&#x27;, 10: &#x27;Raman&#x27;, 11: &#x27;Emisson&#x27;, 12: &#x27;Reflectance&#x27;, 13: &#x27;Directory&#x27;, 14: &#x27;Power&#x27;, 15: &#x27;log Reflectance&#x27;, 16: &#x27;ATR&#x27;, 17: &#x27;Photoacoustic&#x27;, 18: &#x27;Result of Arithmatics, looks like Transmittance&#x27;, 19: &#x27;Result of Arithmatics, looks like Absorbance&#x27;}, {0: &#x27;&#x27;, 1: &#x27;First Derivative&#x27;, 2: &#x27;Second Derivative&#x27;, 3: &#x27;n-th Derivative&#x27;}, {0: &#x27;&#x27;, 1: &#x27;Compound Information&#x27;, 2: &#x27;Peak Table&#x27;, 3: &#x27;Molecular Structure&#x27;, 4: &#x27;Macro&#x27;, 5: &#x27;File Log&#x27;}]"}, {"fullname": "brukeropus.file.constants.STRUCT_3D_INFO_BLOCK", "modulename": "brukeropus.file.constants", "qualname": "STRUCT_3D_INFO_BLOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "[{&#x27;key&#x27;: &#x27;nss&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;nsr&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;nsn&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;npt&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;gfw&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;gbw&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;bfw&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;bbw&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;hfl&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;lfl&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;hff&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;lff&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;filter_size&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;filter_type&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;fxv&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;lxv&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;mny&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;mxy&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;csf&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;pka&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;pra&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;pkl&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;prl&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;srt&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;tim&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}]"}, {"fullname": "brukeropus.file.constants.Y_LABELS", "modulename": "brukeropus.file.constants", "qualname": "Y_LABELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;sm&#x27;: &#x27;Sample Spectrum&#x27;, &#x27;rf&#x27;: &#x27;Reference Spectrum&#x27;, &#x27;igsm&#x27;: &#x27;Sample Interferogram&#x27;, &#x27;igrf&#x27;: &#x27;Reference Interferogram&#x27;, &#x27;phsm&#x27;: &#x27;Sample Phase&#x27;, &#x27;phrf&#x27;: &#x27;Reference Phase&#x27;, &#x27;a&#x27;: &#x27;Absorbance&#x27;, &#x27;t&#x27;: &#x27;Transmittance&#x27;, &#x27;r&#x27;: &#x27;Reflectance&#x27;, &#x27;km&#x27;: &#x27;Kubelka-Munk&#x27;, &#x27;tr&#x27;: &#x27;Trace (Intensity over Time)&#x27;, &#x27;gcig&#x27;: &#x27;gc File (Series of Interferograms)&#x27;, &#x27;gcsc&#x27;: &#x27;gc File (Series of Spectra)&#x27;, &#x27;ra&#x27;: &#x27;Raman&#x27;, &#x27;e&#x27;: &#x27;Emission&#x27;, &#x27;dir&#x27;: &#x27;Directory&#x27;, &#x27;p&#x27;: &#x27;Power&#x27;, &#x27;logr&#x27;: &#x27;log(Reflectance)&#x27;, &#x27;atr&#x27;: &#x27;ATR&#x27;, &#x27;pas&#x27;: &#x27;Photoacoustic&#x27;}"}, {"fullname": "brukeropus.file.constants.XUN_LABELS", "modulename": "brukeropus.file.constants", "qualname": "XUN_LABELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;wl&#x27;: &#x27;Wavelength&#x27;, &#x27;wn&#x27;: &#x27;Wavenumber&#x27;, &#x27;f&#x27;: &#x27;Frequency&#x27;, &#x27;pnt&#x27;: &#x27;Points&#x27;, &#x27;min&#x27;: &#x27;Minutes&#x27;, &#x27;logwn&#x27;: &#x27;Log Wavenumber&#x27;}"}, {"fullname": "brukeropus.file.file", "modulename": "brukeropus.file.file", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.read_opus", "modulename": "brukeropus.file.file", "qualname": "read_opus", "kind": "function", "doc": "<p>Return an <code>OPUSFile</code> object from an OPUS file filepath.</p>\n\n<h6 id=\"the-following-produces-identical-results\">The following produces identical results:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">OPUSFile</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath (str or Path):</strong>  filepath of an OPUS file (typically *.0)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>opus_file (<code>OPUSFile</code>): an instance of the <code>OPUSFile</code> class containing all data/metadata extracted from the\n  file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.OPUSFile", "modulename": "brukeropus.file.file", "qualname": "OPUSFile", "kind": "class", "doc": "<p>Class that contains the data and metadata contained in a bruker OPUS file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath:</strong>  full path to the OPUS file to be parsed. Can be a string or Path object and is required to initilize\nan <code>OPUSFile</code> object.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>is_opus (<code>bool</code>):</strong>  True if filepath points to an OPUS file, False otherwise. Also returned for dunder \n<code>__bool__()</code>  </li>\n<li><strong>params (<code>Parameters</code>):</strong>  class containing all general parameter metadata for the OPUS file. To save typing, the\nthree char parameters from params also become attributes of the <code>OPUSFile</code> class (e.g. bms, apt, src)  </li>\n<li><strong>rf_params (<code>Parameters</code>):</strong>  class containing all reference parameter metadata for the OPUS file.  </li>\n<li><strong>data_keys (list):</strong>  list of all data block keys stored in the file (i.e. sm, rf, t, a, r, igsm, igrf, phsm, etc.).\nThese keys become data attributes of the class which return an instance of <code>Data</code> or <code>Data3D</code>.</li>\n<li><strong>datetime (<code>datetime</code>):</strong>  Returns the most recent datetime of all the data blocks stored in the file (typically\nresult spectra)</li>\n<li><strong>directory (<code>FileDirectory</code>):</strong>   class containing information about all the various data blocks in the file.</li>\n<li><strong>file_log (str):</strong>  File log containing text about how the file was generated/edited (not always saved)</li>\n</ul>\n\n<h6 id=\"data-attributes\">Data Attributes:</h6>\n\n<blockquote>\n  <p><strong>sm:</strong> Single-channel sample spectra <br />\n  <strong>rf:</strong> Single-channel reference spectra <br />\n  <strong>igsm:</strong> Sample interferogram <br />\n  <strong>igrf:</strong> Reference interferogram <br />\n  <strong>phsm:</strong> Sample phase <br />\n  <strong>phrf:</strong> Reference phase <br />\n  <strong>a:</strong> Absorbance <br />\n  <strong>t:</strong> Transmittance <br />\n  <strong>r:</strong> Reflectance <br />\n  <strong>km:</strong> Kubelka-Munk <br />\n  <strong>tr:</strong> Trace (Intensity over Time) <br />\n  <strong>gcig:</strong> gc File (Series of Interferograms) <br />\n  <strong>gcsc:</strong> gc File (Series of Spectra) <br />\n  <strong>ra:</strong> Raman <br />\n  <strong>e:</strong> Emission <br />\n  <strong>dir:</strong> Directory <br />\n  <strong>p:</strong> Power <br />\n  <strong>logr:</strong> log(Reflectance) <br />\n  <strong>atr:</strong> ATR <br />\n  <strong>pas:</strong> Photoacoustic</p>\n</blockquote>\n"}, {"fullname": "brukeropus.file.file.OPUSFile.__init__", "modulename": "brukeropus.file.file", "qualname": "OPUSFile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "brukeropus.file.file.OPUSFile.filepath", "modulename": "brukeropus.file.file", "qualname": "OPUSFile.filepath", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.OPUSFile.print_parameters", "modulename": "brukeropus.file.file", "qualname": "OPUSFile.print_parameters", "kind": "function", "doc": "<p>Prints all the parameter metadata to the console (organized by block)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key_width</span><span class=\"o\">=</span><span class=\"mi\">7</span>, </span><span class=\"param\"><span class=\"n\">label_width</span><span class=\"o\">=</span><span class=\"mi\">40</span>, </span><span class=\"param\"><span class=\"n\">value_width</span><span class=\"o\">=</span><span class=\"mi\">53</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.OPUSFile.iter_data", "modulename": "brukeropus.file.file", "qualname": "OPUSFile.iter_data", "kind": "function", "doc": "<p>Generator that yields the various Data classes from the OPUSFile</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo", "kind": "class", "doc": "<p>Contains type, size and location information about an OPUS file block.</p>\n\n<p>This information is parsed from the directory block of an OPUS file and provides the information needed to parse the\nblock.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_type:</strong>  six integer tuple that describes the type of data in the file block</li>\n<li><strong>size:</strong>  size of block in number of bytes</li>\n<li><strong>start:</strong>  pointer to start location of the block within the file.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>type:</strong>  six integer tuple that describes the type of data in the file block</li>\n<li><strong>size:</strong>  size of block in number of bytes</li>\n<li><strong>start:</strong>  pointer to start location of the block within the file</li>\n<li><strong>keys:</strong>  tuple of three char keys contained in parameter blocks. This attribute is set by the OPUSFile class only\nwhen the block is parameter block. This enables grouping parameters by block if desired.</li>\n</ul>\n"}, {"fullname": "brukeropus.file.file.FileBlockInfo.__init__", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_type</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "brukeropus.file.file.FileBlockInfo.keys", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.keys", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple"}, {"fullname": "brukeropus.file.file.FileBlockInfo.type", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileBlockInfo.size", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileBlockInfo.start", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_valid", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_valid", "kind": "function", "doc": "<p>Returns False if FileBlockInfo is undefined (i.e. FileBlockInfo.type == (0, 0, 0, 0, 0, 0))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_data_status", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_data_status", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a data status parameter block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_rf_param", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_rf_param", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a parameter block associated with the reference measurement</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_param", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_param", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a parameter block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_directory", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_directory", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is the directory block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_file_log", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_file_log", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is the file log block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_data", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_data", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a data block or 3D data block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_3d_data", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_3d_data", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a 3D data block (i.e. data series)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_data_status_match", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_data_status_match", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a data status block and a match to the data_block_info argument.</p>\n\n<p>This function is used to match a data status block (contains metadata for data block) with its associated data\nblock (contains array data).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_block_info (FileBlockInfo):</strong>   data block being tested as a match.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>is_match (bool): True if FileBlockInfo is data status block and input argument is matching data block</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_block_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.get_label", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.get_label", "kind": "function", "doc": "<p>Returns a friendly string label that describes the block type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.get_data_key", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.get_data_key", "kind": "function", "doc": "<p>If block is a data block, this function will return an shorthand key to reference that data.</p>\n\n<p>e.g. t: transmission, a: absorption, sm: sample, rf: reference, smph: sample phase etc. If the block is not\na data block, it will return None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.Data", "modulename": "brukeropus.file.file", "qualname": "Data", "kind": "class", "doc": "<p>Class containing array data and associated parameter/metadata from an OPUS file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes from OPUS file. see: <code>read_opus_file_bytes</code></li>\n<li><strong>data_info:</strong>  <code>FileBlockInfo</code> instance of a data block</li>\n<li><strong>data_status_info:</strong>  <code>FileBlockInfo</code> instance of a data status block which contains metadata about the data_info\nblock. This block is a parameter block.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>params:</strong>  <code>Parameter</code> class with metadata associated with the data block such as first x point: <code>fxp</code>, last x\npoint: <code>lxp</code>, number of points: <code>npt</code>, date: <code>dat</code>, time: <code>tim</code> etc.</li>\n<li><strong>y:</strong>  1D <code>numpy</code> array containing y values of data block</li>\n<li><strong>x:</strong>  1D <code>numpy</code> array containing x values of data block. Units of x array are given by <code>dxu</code> parameter.</li>\n<li><strong>label:</strong>  human-readable string label describing the data block (e.g. Sample Spectrum, Absorbance, etc.)</li>\n</ul>\n\n<h6 id=\"extended-attributes\">Extended Attributes:</h6>\n\n<blockquote>\n  <p><strong>wn:</strong> Returns the x array in wavenumber (cm\u207b\u00b9) units regardless of what units the x array was originally\n      saved in. This is only valid for spectral data blocks such as sample, reference, transmission, etc., not\n      interferogram or phase blocks. <br />\n  <strong>wl:</strong> Returns the x array in wavelength (\u00b5m) units regardless of what units the x array was originally\n      saved in. This is only valid for spectral data blocks such as sample, reference, transmission, etc., not\n      interferogram or phase blocks. <br />\n  <strong>f:</strong> Returns the x array in modulation frequency units (Hz) regardless of what units the x array was\n      originally saved in. This is only valid for spectral data blocks such as sample, reference, transmission,\n      etc., not interferogram or phase blocks. <br />\n  <strong>datetime:</strong> Returns a <code>datetime</code> class of when the data was taken (extracted from data status parameter block). <br />\n  <strong>xxx:</strong> the various three char parameter keys from the <code>params</code> attribute can be directly called from the \n      <code>Data</code> class for convenience. Common parameters include <code>dxu</code> (x units), <code>mxy</code> (max y value), <code>mny</code> (min y\n      value), etc.</p>\n</blockquote>\n"}, {"fullname": "brukeropus.file.file.Data.__init__", "modulename": "brukeropus.file.file", "qualname": "Data.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">data_info</span><span class=\"p\">:</span> <span class=\"n\">brukeropus</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">FileBlockInfo</span>,</span><span class=\"param\">\t<span class=\"n\">data_status_info</span><span class=\"p\">:</span> <span class=\"n\">brukeropus</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">FileBlockInfo</span></span>)</span>"}, {"fullname": "brukeropus.file.file.Data.params", "modulename": "brukeropus.file.file", "qualname": "Data.params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data.y", "modulename": "brukeropus.file.file", "qualname": "Data.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data.x", "modulename": "brukeropus.file.file", "qualname": "Data.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data.label", "modulename": "brukeropus.file.file", "qualname": "Data.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data.vel", "modulename": "brukeropus.file.file", "qualname": "Data.vel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D", "modulename": "brukeropus.file.file", "qualname": "Data3D", "kind": "class", "doc": "<p>Class containing 3D array data (series of spectra) and associated parameter/metadata from an OPUS file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes from OPUS file. see: read_opus_file_bytes</li>\n<li><strong>data_info:</strong>  FileBlockInfo instance of a 3D data block</li>\n<li><strong>data_status_info:</strong>  FileBlockInfo instance of a data status block which contains metadata about the data_info\nblock. This block is a parameter block.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>params:</strong>  Parameter class with metadata associated with the data block such as first x point (fxp), last x point\n(lxp), number of points (npt), date (dat), time (tim) etc.</li>\n<li><strong>y:</strong>  2D numpy array containing y values of data block</li>\n<li><strong>x:</strong>  1D numpy array containing x values of data block. Units of x array are given by .dxu attribute.</li>\n<li><strong>num_spectra:</strong>  number of spectra in the series (i.e. length of y)</li>\n<li><strong>label:</strong>  human-readable string label describing the data block (e.g. Sample Spectrum, Absorbance, etc.)</li>\n</ul>\n\n<h6 id=\"extended-attributes\">Extended Attributes:</h6>\n\n<blockquote>\n  <p><strong>wn:</strong> Returns the x array in wavenumber (cm\u207b\u00b9) units regardless of what units the x array was originally saved\n      in. This is only valid for spectral data blocks such as sample, reference, transmission, etc., not\n      interferogram or phase blocks. <br />\n  <strong>wl:</strong> Returns the x array in wavelength (\u00b5m) units regardless of what units the x array was originally saved\n      in. This is only valid for spectral data blocks such as sample, reference, transmission, etc., not\n      interferogram or phase blocks. <br />\n  <strong>datetime:</strong> Returns a <code>datetime</code> class of when the data was taken (extracted from data status parameter\n      block). <br />\n  <strong>xxx:</strong> the various three char parameter keys from the \"params\" attribute can be directly called from the data\n      class for convenience. Several of these parameters return arrays, rather than singular values because they\n      are recorded for every spectra in the series, e.g. <code>npt</code>, <code>mny</code>, <code>mxy</code>, <code>tim</code>, <code>nsn</code>.</p>\n</blockquote>\n", "bases": "Data"}, {"fullname": "brukeropus.file.file.Data3D.__init__", "modulename": "brukeropus.file.file", "qualname": "Data3D.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">data_info</span><span class=\"p\">:</span> <span class=\"n\">brukeropus</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">FileBlockInfo</span>,</span><span class=\"param\">\t<span class=\"n\">data_status_info</span><span class=\"p\">:</span> <span class=\"n\">brukeropus</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">FileBlockInfo</span></span>)</span>"}, {"fullname": "brukeropus.file.file.Data3D.params", "modulename": "brukeropus.file.file", "qualname": "Data3D.params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D.y", "modulename": "brukeropus.file.file", "qualname": "Data3D.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D.x", "modulename": "brukeropus.file.file", "qualname": "Data3D.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D.num_spectra", "modulename": "brukeropus.file.file", "qualname": "Data3D.num_spectra", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D.label", "modulename": "brukeropus.file.file", "qualname": "Data3D.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Parameters", "modulename": "brukeropus.file.file", "qualname": "Parameters", "kind": "class", "doc": "<p>Class containing parameter metadata of an OPUS file.</p>\n\n<p>Parameters of an OPUS file are stored as key, val pairs, where the key is always three chars.  For example, the\nbeamsplitter is stored in the \"bms\" attribute, source in \"src\" etc.  A list of known keys, with friendly label can\nbe found in <code>brukeropus.file.constants.PARAM_LABELS</code>.  The keys in an OPUS file are not case sensitive, and stored\nin all CAPS (i.e. <code>BMS</code>, <code>SRC</code>, etc.) but this class uses lower case keys to follow python convention.  The class is\ninitialized from a list of parameter <code>FileBlockInfo</code>.  The key, val items in blocks of the list are combined into\none parameter class, so care must be taken not to pass blocks that will overwrite each others keys.  Analagous to a\ndict, the keys, values, and (key, val) can be iterated over using the functions: <code>keys()</code>, <code>values()</code>, and <code>items()</code>\nrespectively.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes from OPUS file. see: <code>brukeropus.file.parser.read_opus_file_bytes</code></li>\n<li><strong>param_blocks:</strong>  list of <code>FileBlockInfo</code>; every block in the list should be classified as a parameter block.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>xxx:</strong>  parameter attributes are stored as three char keys. Which keys are generated depends on the list of\n<code>FileBlockInfo</code> that is used to initialize the class. If input list contains a single data status\n<code>FileBlockInfo</code>, attributes will include: <code>fxv</code>, <code>lxv</code>, <code>npt</code> (first x-val, last x-val, number of points),\netc. Other blocks produce attributes such as: <code>bms</code>, <code>src</code>, <code>apt</code> (beamsplitter, source, aperture) etc. A\nfull list of keys available in a given Parameters instance are given by the <code>keys()</code> method.</li>\n<li><strong>datetime:</strong>  if blocks contain the keys: <code>dat</code> (date) and <code>tim</code> (time), the <code>datetime</code> attribute of this class will\nbe set to a python <code>datetime</code> object. Currently, only data status blocks are known to have these keys. If\n<code>dat</code> and <code>tim</code> are not present in the class, the <code>datetime</code> attribute will return <code>None</code>.</li>\n</ul>\n"}, {"fullname": "brukeropus.file.file.Parameters.__init__", "modulename": "brukeropus.file.file", "qualname": "Parameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">param_blocks</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "brukeropus.file.file.Parameters.keys", "modulename": "brukeropus.file.file", "qualname": "Parameters.keys", "kind": "function", "doc": "<p>Returns a <code>dict_keys</code> class of all valid keys in the class (i.e. dict.keys())</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.Parameters.values", "modulename": "brukeropus.file.file", "qualname": "Parameters.values", "kind": "function", "doc": "<p>Returns a <code>dict_values</code> class of all the values in the class (i.e. dict.values())</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.Parameters.items", "modulename": "brukeropus.file.file", "qualname": "Parameters.items", "kind": "function", "doc": "<p>Returns a <code>dict_items</code> class of all the values in the class (i.e. dict.items())</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.Parameters.datetime", "modulename": "brukeropus.file.file", "qualname": "Parameters.datetime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory", "modulename": "brukeropus.file.file", "qualname": "FileDirectory", "kind": "class", "doc": "<p>Contains type and pointer information for all blocks of data in an OPUS file.</p>\n\n<p><code>FileDirectory</code> information is decoded from the raw file bytes of an OPUS file. First the header is read which\nprovides the start location of the directory block, number of blocks in file, and maximum number of blocks the file\nsupports. Then it decodes the block pointer information from each entry of the file's directory block. Rather than\nstore all file blocks in a single list (as it is done in the OPUS file directory), this class sorts the blocks into\ncategories: <code>data</code>, <code>data_status</code>, <code>params</code>, <code>rf_params</code>, <code>directory</code>, and <code>file_log</code>.  It also pairs the data\nblocks with their corresponding <code>data_status</code> block to simplify grouping y data with the parameters that are used to\ngenerate x data and other data block specific metadata.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes from OPUS file. see: <code>brukeropus.file.parser.read_opus_file_bytes</code></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>start:</strong>  pointer to start location of the directory block</li>\n<li><strong>max_blocks:</strong>  maximum number of blocks supported by file</li>\n<li><strong>num_blocks:</strong>  total number of blocks in the file</li>\n<li><strong>data_blocks:</strong>  list of <code>FileBlockInfo</code> that contain array data (e.g. sample, reference, phase)</li>\n<li><strong>data_status_blocks:</strong>  list of <code>FileBlockInfo</code> that contain metadata specific to a data block (units, etc.)</li>\n<li><strong>param_blocks:</strong>  list of <code>FileBlockInfo</code> that contain metadata about the measurement sample</li>\n<li><strong>rf_param_blocks:</strong>  list of <code>FileBlockInfo</code> that contain metatdata about the reference measurement</li>\n<li><strong>directory_block:</strong>  <code>FileBlockInfo</code> for directory block that contains all the block info in the file</li>\n<li><strong>file_log_block:</strong>  <code>FileBlockInfo</code> of the file log (changes, etc.)</li>\n<li><strong>data_and_status_block_pairs:</strong>  (data: <code>FileBlockInfo</code>, data_status: <code>FileBlockInfo</code>) which pairs the data status\nparameter block (time, x units, y units, etc.) with the data block it informs</li>\n</ul>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.__init__", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span>)</span>"}, {"fullname": "brukeropus.file.file.FileDirectory.data_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.data_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "brukeropus.file.file.FileDirectory.data_status_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.data_status_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "brukeropus.file.file.FileDirectory.param_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.param_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "brukeropus.file.file.FileDirectory.rf_param_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.rf_param_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "brukeropus.file.file.FileDirectory.directory_block", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.directory_block", "kind": "variable", "doc": "<p></p>\n", "annotation": ": brukeropus.file.file.FileBlockInfo"}, {"fullname": "brukeropus.file.file.FileDirectory.file_log_block", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.file_log_block", "kind": "variable", "doc": "<p></p>\n", "annotation": ": brukeropus.file.file.FileBlockInfo"}, {"fullname": "brukeropus.file.file.FileDirectory.data_and_status_block_pairs", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.data_and_status_block_pairs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.max_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.max_blocks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.num_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.num_blocks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.start", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.version", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.parser", "modulename": "brukeropus.file.parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.parser.read_opus_file_bytes", "modulename": "brukeropus.file.parser", "qualname": "read_opus_file_bytes", "kind": "function", "doc": "<p>Returns <code>bytes</code> of an OPUS file specified by <code>filepath</code> (or <code>None</code>).</p>\n\n<p>Function determines if <code>filepath</code> points to an OPUS file by reading the first four bytes which are always the same\nfor OPUS files.  If <code>filepath</code> is not a file, or points to a non-OPUS file, the function returns <code>None</code>.  Otherwise\nthe function returns the entire file as raw <code>bytes</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath (str or Path):</strong>  full filepath to OPUS file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>filebytes (bytes):</strong> raw bytes of OPUS file or <code>None</code> (if filepath does not point to an OPUS file)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.get_block_type", "modulename": "brukeropus.file.parser", "qualname": "get_block_type", "kind": "function", "doc": "<p>Converts an int32 block type code to a six-integer tuple <code>block_type</code>.</p>\n\n<p>This function is used to decode the <code>type_int</code> from the directory block of an OPUS file into a tuple of integers.\nEach integer in the tuple provides information about the associated data block.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>type_int:</strong>  32-bit integer decoded from file directory block</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>block_type (tuple):</strong> six-integer tuple which specifies the block type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">type_int</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_header", "modulename": "brukeropus.file.parser", "qualname": "parse_header", "kind": "function", "doc": "<p>Parses the OPUS file header.</p>\n\n<p>The header of an OPUS file contains some basic information about the file including the version number, location of\nthe directory block, and number of blocks in the file. This header is first to be parsed as it specifies how to\nread the file directory block (which contains information about each block in the file)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes of OPUS file (all bytes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>header_info (tuple):</strong> <br />\n      ( <br />\n          <strong>version (float64):</strong> program version number as a floating-point date (later versions always greater) <br />\n          <strong>directory_start (int32):</strong> pointer to start location of directory block (number of bytes) <br />\n          <strong>max_blocks (int32):</strong> maximum number of blocks supported by the directory block (this should only be\n              relevant when trying to edit an OPUS file, i.e. when adding data blocks to a file) <br />\n          <strong>num_blocks (int32):</strong> total number of blocks in the opus file <br />\n      )</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_directory", "modulename": "brukeropus.file.parser", "qualname": "parse_directory", "kind": "function", "doc": "<p>Parses directory block of OPUS file and yields block info for all blocks in the file as a generator.</p>\n\n<p>The directory block of an OPUS file contains information about every block in the file. The block information is\nstored as three int32 values: <code>type_int</code>, <code>size_int</code>, <code>start</code>.  <code>type_int</code> is an integer representation of the block\ntype. The bits of this <code>type_int</code> have meaning and are parsed into a tuple using <code>get_block_type</code>. The <code>size_int</code> is\nthe size of the block in 32-bit words. <code>start</code> is the starting location of the block (in number of bytes).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes of OPUS file (all bytes)</li>\n<li><strong>start:</strong>  start location of the directory block (specified in file header)</li>\n<li><strong>num_blocks:</strong>  total number of blocks in the file (specified in file header)</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p><strong>block_info (tuple):</strong> <br />\n      ( <br />\n          <strong>block_type (tuple):</strong> six-integer tuple which specifies the block type (see: <code>get_block_type</code>) <br />\n          <strong>size (int):</strong> size (number of bytes) of the block <br />\n          <strong>start (int):</strong> pointer to start location of the block (number of bytes) <br />\n      )</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">directory_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">num_blocks</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_param_block", "modulename": "brukeropus.file.parser", "qualname": "parse_param_block", "kind": "function", "doc": "<p>Parses the bytes in a parameter block and yields the key, value pairs as a generator.</p>\n\n<p>Parameter blocks are in the form: <code>XXX</code>, <code>dtype_code</code>, <code>size</code>, <code>val</code>.  <code>XXX</code> is a three char abbreviation of the\nparameter (key). The value of the parameter is decoded according to the <code>dtype_code</code> and size integers to be either:\n<code>int</code>, <code>float</code>, or <code>string</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes of OPUS file (all bytes)</li>\n<li><strong>size:</strong>  total number of bytes in parameter block (specified in file directory)</li>\n<li><strong>start:</strong>  pointer to start location of parameter block (specified in file directory)</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p><strong>items (tuple):</strong> (key, value) pairs where key is three char string (lowercase) and value can be <code>int</code>, <code>float</code>\n      or <code>string</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.get_dpf_dtype_count", "modulename": "brukeropus.file.parser", "qualname": "get_dpf_dtype_count", "kind": "function", "doc": "<p>Returns numpy dtype and array count from the data point format (dpf) and block size (in bytes).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dpf:</strong>  data point format integer stored in data status block.\ndpf = 1 -> array of float32\ndpf = 2 -> array of int32</li>\n<li><strong>size:</strong>  Block size in bytes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>dtype (numpy.dtype):</strong> <code>numpy</code> dtype for defining an <code>ndarray</code> to store the data\n  <strong>count (int):</strong> length of array calculated from the block size and byte size of the dtype.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dpf</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_data_block", "modulename": "brukeropus.file.parser", "qualname": "parse_data_block", "kind": "function", "doc": "<p>Parses the bytes in a data block (specified by <code>size</code> and <code>start</code> pointers) and returns a <code>numpy</code> array.</p>\n\n<p>Data blocks contain no metadata, only the y-values of a data array. Data arrays include: single-channel sample,\nreference, phase, interferograms, and a variety of resultant data (transmission, absorption, etc.).  Every data\nblock should have a corresponding data status parameter block which can be used to generate the x-array values for\nthe data block. The data status block also specifies the data type of the data array with the <code>DPF</code> parameter. It\nappears that OPUS currently exclusively stores data blocks as 32-bit floats, but has a reservation for 32-bit\nintegers when <code>DPF</code> = 2.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  full OPUS file bytes</li>\n<li><strong>size:</strong>  size of data block to decode in bytes</li>\n<li><strong>start:</strong>  pointer to start location of the data block</li>\n<li><strong>dpf:</strong>  data-point-format integer stored in corresponding data status block.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>y_array (numpy.ndarray):</strong> <code>numpy</code> array of y values contained in the data block</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">dpf</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_3d_data_block", "modulename": "brukeropus.file.parser", "qualname": "parse_3d_data_block", "kind": "function", "doc": "<p>Parses the bytes in a 3D data block (series of spectra) and returns a data <code>dict</code> containing data and metadata.</p>\n\n<p>3D data blocks are structured differently than standard data blocks. In addition to the series of spectra, they\ninclude metadata for each of the spectrum.  This function returns a <code>dict</code> containing all the extracted information\nfrom the data block.  The series spectra is formed into a 2D array while metadata captured for each spectra is\nformed into a 1D array (length = number of spectral measurements in the series).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  full OPUS file bytes</li>\n<li><strong>start:</strong>  pointer to start location of the data block</li>\n<li><strong>dpf:</strong>  data-point-format integer stored in corresponding data status block.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>data_dict (dict):</strong> <code>dict</code> containing all extracted information from the data block <br />\n      { <br />\n          <strong>version:</strong> file format version number (should be 0) <br />\n          <strong>num_blocks:</strong> number of sub blocks; each sub block features a data spectra and associated metadata <br />\n          <strong>offset:</strong> offset in bytes to the first sub data block <br />\n          <strong>data_size:</strong> size in bytes of each sub data block <br />\n          <strong>info_size:</strong> size in bytes of the metadata info block immediately following the sub data block <br />\n          <strong>store_table:</strong> run numbers of the first and last blocks to keep track of skipped spectra <br />\n          <strong>y:</strong> 2D <code>numpy</code> array containing all spectra (C-order) <br />\n          <strong>metadata arrays:</strong> series of metadata arrays in 1D array format (e.g. <code>npt</code>, <code>mny</code>, <code>mxy</code>, <code>tim</code>).\n              The most useful one is generally <code>tim</code>, which can be used as the time axis for 3D data plots. <br />\n      }</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">dpf</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_file_log", "modulename": "brukeropus.file.parser", "qualname": "parse_file_log", "kind": "function", "doc": "<p>Parses the file log in an OPUS file and returns a list of strings contained in the log.</p>\n\n<p>The file log block of an OPUS file contains some information about how the file was generated and edits that have\nbeen performed on the file.  This function parses the file log as a list of strings using b'\u0000' as a seperator,\nand does not take any steps to parameterizing what is contained in the log.  This log is generally not needed to\nretrieve the file data and metadata, but might be useful for inspecting the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  full OPUS file bytes</li>\n<li><strong>size:</strong>  size of file log block to decode in bytes</li>\n<li><strong>start:</strong>  pointer to start location of the file log block</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>strings (list):</strong> list of strings found in the file log.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils", "modulename": "brukeropus.file.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.utils.find_opus_files", "modulename": "brukeropus.file.utils", "qualname": "find_opus_files", "kind": "function", "doc": "<p>Finds all files in a directory with a strictly numeric extension (OPUS file convention).</p>\n\n<p>Returns a list of all files in directory that end in .# (e.g. file.0, file.1, file.1001, etc.). Setting recursive\nto true will search directory and all sub directories recursively. No attempt is made to verify the files are\nactually OPUS files (requires opening the file); the function simply looks for files that match the naming pattern.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>directory (str or Path):</strong>  path indicating directory to search</li>\n<li><strong>recursive:</strong>  Set to True to recursively search sub directories as well</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>filepaths (list): list of filepaths that match OPUS naming convention (numeric extension)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span>, </span><span class=\"param\"><span class=\"n\">recursive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.get_param_label", "modulename": "brukeropus.file.utils", "qualname": "get_param_label", "kind": "function", "doc": "<p>Returns a short but descriptive label for 3-letter parameters. For example, bms returns Beamsplitter.</p>\n\n<p>The 3-letter parameter input is not case sensitive.  This package includes the majority of parameters that OPUS\nuses, but in the event a parameter label is not known, this function will return: \"Unknown XXX\" where XXX is the\nunknown 3-letter parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>param:</strong>  three letter parameter code (e.g. bms, src, npt, etc.) [not case sensitive]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>label (str): Human-readable string label for the parameter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.get_type_code_label", "modulename": "brukeropus.file.utils", "qualname": "get_type_code_label", "kind": "function", "doc": "<p>Returns the type code label of a file block given the position index and value of the type code.</p>\n\n<p>The file blocks on an OPUS file feature six-integer type codes, for example (3, 1, 1, 2, 0, 0), that categorize the\ncontents of the file block. The positional index defines the category, while the value at that index defines the\nspecific type of that category.  For example, the first integer (pos_idx=0), describes the type of data in the\nblock, if applicable:</p>\n\n<pre><code>0: Undefined or N/A,\n1: Real Part of Complex Data,\n2: Imaginary Part of Complex Data,\n3: Amplitude\n</code></pre>\n\n<p>This package includes the majority of type codes that OPUS uses, but in the event a type code label is not known,\nthis function will return: \"Unknown 0 4\" where the first number is the position index, and the second is the\nunknown value integer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos_idx:</strong>  positional index of the type code (0 - 5)</li>\n<li><strong>val:</strong>  value of the type code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>label (str): human-readable string label that describes the type code.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pos_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.get_block_type_label", "modulename": "brukeropus.file.utils", "qualname": "get_block_type_label", "kind": "function", "doc": "<p>Converts a six-integer tuple block type into a human readable label.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_type:</strong>  six integer tuple found in the OPUS file directory that describes the block type</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>label (str): human-readable string label</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_type</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.get_data_key", "modulename": "brukeropus.file.utils", "qualname": "get_data_key", "kind": "function", "doc": "<p>Returns a shorthand key for a given data block type: sm, rf, igsm, a, t, r, etc.</p>\n\n<p>Determines if the data block type is an interferogram, single-channel, absorption, etc. and whether it is associated\nwith the sample or reference channel and returns a shortand key-like label: sm, rf, igsm, igrf, a, t, r, etc.  For\nthe full data label (e.g. Sample Spectrum, Absorbance) use: get_block_type_label.\nThis package includes the majority of type codes that OPUS uses, but in the event a type code label is not known,\nthis function will return: \"_33\" or \"sm_33\" where 33 will change to the unkown block_type integer value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_type:</strong>  six integer tuple found in the OPUS file directory that describes the block type</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>key (str): shorthand string label that can be utilized as a data key (e.g. \"sm\", \"igrf\", \"a\")</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_type</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.parse_file_and_print", "modulename": "brukeropus.file.utils", "qualname": "parse_file_and_print", "kind": "function", "doc": "<p>Parses an OPUS file and prints the block information as it goes along to the console.</p>\n\n<p>This function demonstrates the basic usage and interaction of the parsing functions.  It\ncan also be used to diagnose a file parsing issue if one comes up.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath (str or Path):</strong>  filepath to an OPUS file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">120</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];
=======
    /** pdoc search index */const docs = [{"fullname": "brukeropus", "modulename": "brukeropus", "kind": "module", "doc": "<p><code>brukeropus</code> is a Python package for interacting with Bruker's OPUS spectroscopy software. Currently, the package can\nread OPUS data files and communicate/control OPUS software using the DDE communication protocol)</p>\n\n<h3 id=\"installation\">Installation</h3>\n\n<p><code>brukeropus</code> requires <code>python 3.6+</code> and <code>numpy</code>, but <code>matplotlib</code> is needed to run the plotting examples.  You can\ninstall with pip:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">brukeropus</span>\n</code></pre>\n</div>\n\n<h3 id=\"namespace\">Namespace</h3>\n\n<p><code>brukeropus</code> provides direct imports to the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">find_opus_files</span><span class=\"p\">,</span> <span class=\"n\">read_opus</span><span class=\"p\">,</span> <span class=\"n\">OPUSFile</span><span class=\"p\">,</span> <span class=\"n\">Opus</span>\n</code></pre>\n</div>\n\n<p>All other file functions or classes can be directly imported from the <code>brukeropus.file</code> or <code>brukeropus.control</code>\nsubmodules, e.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus.file</span> <span class=\"kn\">import</span> <span class=\"n\">parse_file_and_print</span>\n</code></pre>\n</div>\n\n<p>It is recommended that you do <strong>not</strong> import from the fully qualified namespace, e.g.:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus.file.utils</span> <span class=\"kn\">import</span> <span class=\"n\">parse_file_and_print</span>\n</code></pre>\n</div>\n\n<p>as that namespace is subject to change. Instead import directly from <code>brukeropus</code> or its first level submodules.</p>\n\n<h3 id=\"reading-opus-files-basic-usage\">Reading OPUS Files (Basic Usage)</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">read_opus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">opus_file</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns an OPUSFile class</span>\n\n<span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">print_parameters</span><span class=\"p\">()</span>  <span class=\"c1\"># Pretty prints all metadata in the file to the console</span>\n\n<span class=\"k\">if</span> <span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">data_keys</span><span class=\"p\">:</span>  <span class=\"c1\"># If absorbance spectra was extracted from file</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>  <span class=\"c1\"># Plot absorbance spectra</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">sfm</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; - &#39;</span> <span class=\"o\">+</span> <span class=\"n\">opus_file</span><span class=\"o\">.</span><span class=\"n\">snm</span><span class=\"p\">)</span>  <span class=\"c1\"># Sets plot title to Sample Form - Sample Name</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>  <span class=\"c1\"># Display plot</span>\n</code></pre>\n</div>\n\n<p>More detailed documentation on the file submodule can be found in <code>brukeropus.file</code></p>\n\n<h3 id=\"controlling-opus-software-basic-usage\">Controlling OPUS Software (Basic Usage)</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">opus</span><span class=\"p\">,</span> <span class=\"n\">read_opus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">opus</span> <span class=\"o\">=</span> <span class=\"n\">Opus</span><span class=\"p\">()</span>  <span class=\"c1\"># Connects to actively running OPUS software</span>\n\n<span class=\"n\">apt_options</span> <span class=\"o\">=</span> <span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_param_options</span><span class=\"p\">(</span><span class=\"s1\">&#39;apt&#39;</span><span class=\"p\">)</span> <span class=\"c1\"># Get all valid aperture settings</span>\n\n<span class=\"k\">for</span> <span class=\"n\">apt</span> <span class=\"ow\">in</span> <span class=\"n\">apt_options</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"c1\"># Loop over all but the two smallest and two largest aperature settings</span>\n    <span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">measure_sample</span><span class=\"p\">(</span><span class=\"n\">apt</span><span class=\"o\">=</span><span class=\"n\">apt</span><span class=\"p\">,</span> <span class=\"n\">nss</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">unload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># Perform measurement and unload file from OPUS</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span> <span class=\"c1\"># Read OPUS file from measurement</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">apt</span><span class=\"p\">)</span> <span class=\"c1\"># Plot single-channel sample spectra</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>More detailed documentation on the control submodule can be found in <code>brukeropus.control</code>.</p>\n"}, {"fullname": "brukeropus.control", "modulename": "brukeropus.control", "kind": "module", "doc": "<p>The <code>brukeropus.control</code> submodule of <code>brukeropus</code> includes the <code>Opus</code> class for communicating with OPUS software. The\n<code>Opus</code> class currently supports communication through the Dynamic Data Exchange (DDE) protocol.  This class can be used\nto script measurement sweeps and perform various low-level operations (e.g. move mirrors, rotate polarizers, etc.). In\norder to communicate with OPUS, the software must be open, logged in, and running on the same PC as <code>brukeropus</code>.</p>\n\n<h3 id=\"initializingverifying-connection-to-opus-software\">Initializing/verifying connection to OPUS Software</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">Opus</span>\n\n<span class=\"n\">opus</span> <span class=\"o\">=</span> <span class=\"n\">Opus</span><span class=\"p\">()</span>  <span class=\"c1\"># initialization of class automatically connects to open OPUS software</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">())</span>  <span class=\"c1\"># prints the current OPUS software version</span>\n</code></pre>\n</div>\n\n<h3 id=\"get-information-about-a-parameter-eg-dtc-apt-vel\">Get information about a parameter (e.g. DTC, APT, VEL).</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">opus</span> <span class=\"o\">=</span> <span class=\"n\">Opus</span><span class=\"p\">()</span>\n<span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;vel&#39;</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_param_label</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_param_options</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h3 id=\"perform-a-measurement-sweep\">Perform a measurement sweep</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">opus</span><span class=\"p\">,</span> <span class=\"n\">read_opus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n\n<span class=\"n\">opus</span> <span class=\"o\">=</span> <span class=\"n\">Opus</span><span class=\"p\">()</span>  <span class=\"c1\"># Connects to actively running OPUS software</span>\n\n<span class=\"n\">apt_options</span> <span class=\"o\">=</span> <span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">get_param_options</span><span class=\"p\">(</span><span class=\"s1\">&#39;apt&#39;</span><span class=\"p\">)</span> <span class=\"c1\"># Get all valid aperture settings</span>\n\n<span class=\"k\">for</span> <span class=\"n\">apt</span> <span class=\"ow\">in</span> <span class=\"n\">apt_options</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"c1\"># Loop over all but the two smallest and two largest aperature settings</span>\n    <span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"n\">opus</span><span class=\"o\">.</span><span class=\"n\">measure_sample</span><span class=\"p\">(</span><span class=\"n\">apt</span><span class=\"o\">=</span><span class=\"n\">apt</span><span class=\"p\">,</span> <span class=\"n\">nss</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">unload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># Perform measurement and unload file from OPUS</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span> <span class=\"c1\"># Read OPUS file from measurement</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">apt</span><span class=\"p\">)</span> <span class=\"c1\"># Plot single-channel sample spectra</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>For complete <code>Opus</code> documentation, see: <code>brukeropus.control.opus</code></p>\n"}, {"fullname": "brukeropus.control.dde", "modulename": "brukeropus.control.dde", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.control.dde.HCONV", "modulename": "brukeropus.control.dde", "qualname": "HCONV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_void_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.HDDEDATA", "modulename": "brukeropus.control.dde", "qualname": "HDDEDATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_void_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.HSZ", "modulename": "brukeropus.control.dde", "qualname": "HSZ", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_void_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.LPBYTE", "modulename": "brukeropus.control.dde", "qualname": "LPBYTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_char_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.LPDWORD", "modulename": "brukeropus.control.dde", "qualname": "LPDWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.wintypes.LP_c_ulong&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.LPSTR", "modulename": "brukeropus.control.dde", "qualname": "LPSTR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_char_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.ULONG_PTR", "modulename": "brukeropus.control.dde", "qualname": "ULONG_PTR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_ulong&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.PCONVCONTEXT", "modulename": "brukeropus.control.dde", "qualname": "PCONVCONTEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.c_void_p&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.DMLERR_NO_ERROR", "modulename": "brukeropus.control.dde", "qualname": "DMLERR_NO_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "brukeropus.control.dde.CF_TEXT", "modulename": "brukeropus.control.dde", "qualname": "CF_TEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "brukeropus.control.dde.CF_BITMAP", "modulename": "brukeropus.control.dde", "qualname": "CF_BITMAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "brukeropus.control.dde.CF_METAFILEPICT", "modulename": "brukeropus.control.dde", "qualname": "CF_METAFILEPICT", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "brukeropus.control.dde.CF_SYLK", "modulename": "brukeropus.control.dde", "qualname": "CF_SYLK", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "brukeropus.control.dde.CF_DIF", "modulename": "brukeropus.control.dde", "qualname": "CF_DIF", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "brukeropus.control.dde.CF_TIFF", "modulename": "brukeropus.control.dde", "qualname": "CF_TIFF", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "brukeropus.control.dde.CF_OEMTEXT", "modulename": "brukeropus.control.dde", "qualname": "CF_OEMTEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "7"}, {"fullname": "brukeropus.control.dde.CF_DIB", "modulename": "brukeropus.control.dde", "qualname": "CF_DIB", "kind": "variable", "doc": "<p></p>\n", "default_value": "8"}, {"fullname": "brukeropus.control.dde.CF_PALETTE", "modulename": "brukeropus.control.dde", "qualname": "CF_PALETTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "9"}, {"fullname": "brukeropus.control.dde.CF_PENDATA", "modulename": "brukeropus.control.dde", "qualname": "CF_PENDATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "brukeropus.control.dde.CF_RIFF", "modulename": "brukeropus.control.dde", "qualname": "CF_RIFF", "kind": "variable", "doc": "<p></p>\n", "default_value": "11"}, {"fullname": "brukeropus.control.dde.CF_WAVE", "modulename": "brukeropus.control.dde", "qualname": "CF_WAVE", "kind": "variable", "doc": "<p></p>\n", "default_value": "12"}, {"fullname": "brukeropus.control.dde.CF_UNICODETEXT", "modulename": "brukeropus.control.dde", "qualname": "CF_UNICODETEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "13"}, {"fullname": "brukeropus.control.dde.CF_ENHMETAFILE", "modulename": "brukeropus.control.dde", "qualname": "CF_ENHMETAFILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "14"}, {"fullname": "brukeropus.control.dde.CF_HDROP", "modulename": "brukeropus.control.dde", "qualname": "CF_HDROP", "kind": "variable", "doc": "<p></p>\n", "default_value": "15"}, {"fullname": "brukeropus.control.dde.CF_LOCALE", "modulename": "brukeropus.control.dde", "qualname": "CF_LOCALE", "kind": "variable", "doc": "<p></p>\n", "default_value": "16"}, {"fullname": "brukeropus.control.dde.CF_DIBV5", "modulename": "brukeropus.control.dde", "qualname": "CF_DIBV5", "kind": "variable", "doc": "<p></p>\n", "default_value": "17"}, {"fullname": "brukeropus.control.dde.CF_MAX", "modulename": "brukeropus.control.dde", "qualname": "CF_MAX", "kind": "variable", "doc": "<p></p>\n", "default_value": "18"}, {"fullname": "brukeropus.control.dde.DDE_FACK", "modulename": "brukeropus.control.dde", "qualname": "DDE_FACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "32768"}, {"fullname": "brukeropus.control.dde.DDE_FBUSY", "modulename": "brukeropus.control.dde", "qualname": "DDE_FBUSY", "kind": "variable", "doc": "<p></p>\n", "default_value": "16384"}, {"fullname": "brukeropus.control.dde.DDE_FDEFERUPD", "modulename": "brukeropus.control.dde", "qualname": "DDE_FDEFERUPD", "kind": "variable", "doc": "<p></p>\n", "default_value": "16384"}, {"fullname": "brukeropus.control.dde.DDE_FACKREQ", "modulename": "brukeropus.control.dde", "qualname": "DDE_FACKREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "32768"}, {"fullname": "brukeropus.control.dde.DDE_FRELEASE", "modulename": "brukeropus.control.dde", "qualname": "DDE_FRELEASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "8192"}, {"fullname": "brukeropus.control.dde.DDE_FREQUESTED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FREQUESTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "4096"}, {"fullname": "brukeropus.control.dde.DDE_FAPPSTATUS", "modulename": "brukeropus.control.dde", "qualname": "DDE_FAPPSTATUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "255"}, {"fullname": "brukeropus.control.dde.DDE_FNOTPROCESSED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FNOTPROCESSED", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "brukeropus.control.dde.DDE_FACKRESERVED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FACKRESERVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-49408"}, {"fullname": "brukeropus.control.dde.DDE_FADVRESERVED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FADVRESERVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-49153"}, {"fullname": "brukeropus.control.dde.DDE_FDATRESERVED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FDATRESERVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-45057"}, {"fullname": "brukeropus.control.dde.DDE_FPOKRESERVED", "modulename": "brukeropus.control.dde", "qualname": "DDE_FPOKRESERVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-8193"}, {"fullname": "brukeropus.control.dde.XTYPF_NOBLOCK", "modulename": "brukeropus.control.dde", "qualname": "XTYPF_NOBLOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "brukeropus.control.dde.XTYPF_NODATA", "modulename": "brukeropus.control.dde", "qualname": "XTYPF_NODATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "brukeropus.control.dde.XTYPF_ACKREQ", "modulename": "brukeropus.control.dde", "qualname": "XTYPF_ACKREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "8"}, {"fullname": "brukeropus.control.dde.XCLASS_MASK", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_MASK", "kind": "variable", "doc": "<p></p>\n", "default_value": "64512"}, {"fullname": "brukeropus.control.dde.XCLASS_BOOL", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_BOOL", "kind": "variable", "doc": "<p></p>\n", "default_value": "4096"}, {"fullname": "brukeropus.control.dde.XCLASS_DATA", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "8192"}, {"fullname": "brukeropus.control.dde.XCLASS_FLAGS", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_FLAGS", "kind": "variable", "doc": "<p></p>\n", "default_value": "16384"}, {"fullname": "brukeropus.control.dde.XCLASS_NOTIFICATION", "modulename": "brukeropus.control.dde", "qualname": "XCLASS_NOTIFICATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "32768"}, {"fullname": "brukeropus.control.dde.XTYP_ERROR", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "32770"}, {"fullname": "brukeropus.control.dde.XTYP_ADVDATA", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ADVDATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "16400"}, {"fullname": "brukeropus.control.dde.XTYP_ADVREQ", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ADVREQ", "kind": "variable", "doc": "<p></p>\n", "default_value": "8226"}, {"fullname": "brukeropus.control.dde.XTYP_ADVSTART", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ADVSTART", "kind": "variable", "doc": "<p></p>\n", "default_value": "4144"}, {"fullname": "brukeropus.control.dde.XTYP_ADVSTOP", "modulename": "brukeropus.control.dde", "qualname": "XTYP_ADVSTOP", "kind": "variable", "doc": "<p></p>\n", "default_value": "32832"}, {"fullname": "brukeropus.control.dde.XTYP_EXECUTE", "modulename": "brukeropus.control.dde", "qualname": "XTYP_EXECUTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "16464"}, {"fullname": "brukeropus.control.dde.XTYP_CONNECT", "modulename": "brukeropus.control.dde", "qualname": "XTYP_CONNECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "4194"}, {"fullname": "brukeropus.control.dde.XTYP_CONNECT_CONFIRM", "modulename": "brukeropus.control.dde", "qualname": "XTYP_CONNECT_CONFIRM", "kind": "variable", "doc": "<p></p>\n", "default_value": "32882"}, {"fullname": "brukeropus.control.dde.XTYP_XACT_COMPLETE", "modulename": "brukeropus.control.dde", "qualname": "XTYP_XACT_COMPLETE", "kind": "variable", "doc": "<p></p>\n", "default_value": "32896"}, {"fullname": "brukeropus.control.dde.XTYP_POKE", "modulename": "brukeropus.control.dde", "qualname": "XTYP_POKE", "kind": "variable", "doc": "<p></p>\n", "default_value": "16528"}, {"fullname": "brukeropus.control.dde.XTYP_REGISTER", "modulename": "brukeropus.control.dde", "qualname": "XTYP_REGISTER", "kind": "variable", "doc": "<p></p>\n", "default_value": "32930"}, {"fullname": "brukeropus.control.dde.XTYP_REQUEST", "modulename": "brukeropus.control.dde", "qualname": "XTYP_REQUEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "8368"}, {"fullname": "brukeropus.control.dde.XTYP_DISCONNECT", "modulename": "brukeropus.control.dde", "qualname": "XTYP_DISCONNECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "32962"}, {"fullname": "brukeropus.control.dde.XTYP_UNREGISTER", "modulename": "brukeropus.control.dde", "qualname": "XTYP_UNREGISTER", "kind": "variable", "doc": "<p></p>\n", "default_value": "32978"}, {"fullname": "brukeropus.control.dde.XTYP_WILDCONNECT", "modulename": "brukeropus.control.dde", "qualname": "XTYP_WILDCONNECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "8418"}, {"fullname": "brukeropus.control.dde.XTYP_MONITOR", "modulename": "brukeropus.control.dde", "qualname": "XTYP_MONITOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "33010"}, {"fullname": "brukeropus.control.dde.XTYP_MASK", "modulename": "brukeropus.control.dde", "qualname": "XTYP_MASK", "kind": "variable", "doc": "<p></p>\n", "default_value": "240"}, {"fullname": "brukeropus.control.dde.XTYP_SHIFT", "modulename": "brukeropus.control.dde", "qualname": "XTYP_SHIFT", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "brukeropus.control.dde.TIMEOUT_ASYNC", "modulename": "brukeropus.control.dde", "qualname": "TIMEOUT_ASYNC", "kind": "variable", "doc": "<p></p>\n", "default_value": "4294967295"}, {"fullname": "brukeropus.control.dde.get_winfunc", "modulename": "brukeropus.control.dde", "qualname": "get_winfunc", "kind": "function", "doc": "<p>Retrieve a function from a library, and set the data types.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">libname</span>,</span><span class=\"param\">\t<span class=\"n\">funcname</span>,</span><span class=\"param\">\t<span class=\"n\">restype</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">argtypes</span><span class=\"o\">=</span><span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">_libcache</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;user32&#39;</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">WinDLL</span> <span class=\"s1\">&#39;user32&#39;</span><span class=\"p\">,</span> <span class=\"n\">handle</span> <span class=\"mi\">7</span><span class=\"n\">fff631d0000</span><span class=\"o\">&gt;</span><span class=\"p\">}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.DDECALLBACK", "modulename": "brukeropus.control.dde", "qualname": "DDECALLBACK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;ctypes.WINFUNCTYPE.&lt;locals&gt;.WinFunctionType&#x27;&gt;"}, {"fullname": "brukeropus.control.dde.DDE", "modulename": "brukeropus.control.dde", "qualname": "DDE", "kind": "class", "doc": "<p>Object containing all the DDE functions</p>\n"}, {"fullname": "brukeropus.control.dde.DDE.AccessData", "modulename": "brukeropus.control.dde", "qualname": "DDE.AccessData", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.ClientTransaction", "modulename": "brukeropus.control.dde", "qualname": "DDE.ClientTransaction", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.Connect", "modulename": "brukeropus.control.dde", "qualname": "DDE.Connect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.CreateStringHandle", "modulename": "brukeropus.control.dde", "qualname": "DDE.CreateStringHandle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.Disconnect", "modulename": "brukeropus.control.dde", "qualname": "DDE.Disconnect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.GetLastError", "modulename": "brukeropus.control.dde", "qualname": "DDE.GetLastError", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.Initialize", "modulename": "brukeropus.control.dde", "qualname": "DDE.Initialize", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.FreeDataHandle", "modulename": "brukeropus.control.dde", "qualname": "DDE.FreeDataHandle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.FreeStringHandle", "modulename": "brukeropus.control.dde", "qualname": "DDE.FreeStringHandle", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.QueryString", "modulename": "brukeropus.control.dde", "qualname": "DDE.QueryString", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.UnaccessData", "modulename": "brukeropus.control.dde", "qualname": "DDE.UnaccessData", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDE.Uninitialize", "modulename": "brukeropus.control.dde", "qualname": "DDE.Uninitialize", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_FuncPtr object&gt;"}, {"fullname": "brukeropus.control.dde.DDEError", "modulename": "brukeropus.control.dde", "qualname": "DDEError", "kind": "class", "doc": "<p>Exception raise when a DDE errpr occures.</p>\n", "bases": "builtins.RuntimeError"}, {"fullname": "brukeropus.control.dde.DDEError.__init__", "modulename": "brukeropus.control.dde", "qualname": "DDEError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">idInst</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "brukeropus.control.dde.DDEClient", "modulename": "brukeropus.control.dde", "qualname": "DDEClient", "kind": "class", "doc": "<p>The DDEClient class.</p>\n\n<p>Use this class to create and manage a connection to a service/topic.  To get\nclassbacks subclass DDEClient and overwrite callback.</p>\n"}, {"fullname": "brukeropus.control.dde.DDEClient.__init__", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.__init__", "kind": "function", "doc": "<p>Create a connection to a service/topic.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">service</span>, </span><span class=\"param\"><span class=\"n\">topic</span></span>)</span>"}, {"fullname": "brukeropus.control.dde.DDEClient.advise", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.advise", "kind": "function", "doc": "<p>Request updates when DDE data changes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span>, </span><span class=\"param\"><span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.DDEClient.execute", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.execute", "kind": "function", "doc": "<p>Execute a DDE command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">command</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.DDEClient.request", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.request", "kind": "function", "doc": "<p>Request data from DDE service.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.DDEClient.callback", "modulename": "brukeropus.control.dde", "qualname": "DDEClient.callback", "kind": "function", "doc": "<p>Calback function for advice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.dde.WinMSGLoop", "modulename": "brukeropus.control.dde", "qualname": "WinMSGLoop", "kind": "function", "doc": "<p>Run the main windows message loop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus", "modulename": "brukeropus.control.opus", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.control.opus.ERROR_CODES", "modulename": "brukeropus.control.opus", "qualname": "ERROR_CODES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{1: &#x27;Not an Opus Command&#x27;, 2: &#x27;Unknown Opus Command&#x27;, 3: &#x27;Missing Square Bracket in Command&#x27;, 4: &#x27;Function Not Available (Possible missing parameter)&#x27;, 5: &#x27;Parameter Name Is Incorrect&#x27;, 6: &#x27;Parameter Set Is Incomplete&#x27;, 7: &#x27;File Parameter Is Incorrectly Formatted&#x27;, 8: &#x27;File(s) Missing Or Corrupt&#x27;, 9: &#x27;Opus Could Not Complete The Command&#x27;}"}, {"fullname": "brukeropus.control.opus.Opus", "modulename": "brukeropus.control.opus", "qualname": "Opus", "kind": "class", "doc": "<p>Class for communicating with currently running OPUS software using DDE interface.  Class automatically attempts\nto connect to OPUS software upon initialization.</p>\n"}, {"fullname": "brukeropus.control.opus.Opus.dde", "modulename": "brukeropus.control.opus", "qualname": "Opus.dde", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "brukeropus.control.opus.Opus.connected", "modulename": "brukeropus.control.opus", "qualname": "Opus.connected", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "brukeropus.control.opus.Opus.error_string", "modulename": "brukeropus.control.opus", "qualname": "Opus.error_string", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Error&#x27;"}, {"fullname": "brukeropus.control.opus.Opus.connect", "modulename": "brukeropus.control.opus", "qualname": "Opus.connect", "kind": "function", "doc": "<p>Connects class to OPUS software through the DDE interface.  Sets the <code>connected</code> attribute to <code>True</code> if\nsuccessful.  By default, initializing an <code>Opus</code> class will automatically attempt to connect to OPUS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.disconnect", "modulename": "brukeropus.control.opus", "qualname": "Opus.disconnect", "kind": "function", "doc": "<p>Disconnects DDE client/server connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.raw_query", "modulename": "brukeropus.control.opus", "qualname": "Opus.raw_query", "kind": "function", "doc": "<p>Sends command/request string (<code>req_str</code>) to OPUS and returns the response in byte format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>req_str:</strong>  The request string to send to OPUS over DDE</li>\n<li><strong>timeout:</strong>  timeout in milliseconds.  If a response is not recieved within the timeout period, an exception is\nraised.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: response from OPUS software through DDE request in bytes format.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">req_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.parse_response", "modulename": "brukeropus.control.opus", "qualname": "Opus.parse_response", "kind": "function", "doc": "<p>Parses the byte response from a raw DDE request query.  If an error is detected in the request, an Exception\nis raised.  If successful, a boolean, string or list of strings will be returned as appropriate.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>byte_response:</strong>  response from OPUS software through DDE request in bytes format.</li>\n<li><strong>decode:</strong>  format used to decode bytes into string (e.g. 'ascii' or 'utf-8')</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: parsed response from OPUS software (bool, string, or list of strings depending on request)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">byte_response</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">decode</span><span class=\"o\">=</span><span class=\"s1\">&#39;ascii&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.query", "modulename": "brukeropus.control.opus", "qualname": "Opus.query", "kind": "function", "doc": "<p>Sends a command/request and returns the parsed response.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>req_str:</strong>  The request string to send to OPUS over DDE</li>\n<li><strong>timeout:</strong>  timeout in milliseconds.  If a response is not recieved within the timeout period, an exception is\nraised.</li>\n<li><strong>decode:</strong>  format used to decode bytes into string (e.g. 'ascii' or 'utf-8')</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: parsed response from OPUS software (bool, string, or list of strings depending on request)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">req_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10000</span>, </span><span class=\"param\"><span class=\"n\">decode</span><span class=\"o\">=</span><span class=\"s1\">&#39;ascii&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.close_opus", "modulename": "brukeropus.control.opus", "qualname": "Opus.close_opus", "kind": "function", "doc": "<p>Closes the OPUS application. Returns <code>True</code> if successful.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.get_param_label", "modulename": "brukeropus.control.opus", "qualname": "Opus.get_param_label", "kind": "function", "doc": "<p>Get the label for a three character parameter code (e.g. BMS, APT, DTC, etc...).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>param:</strong>  three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>label: short descriptive label that defines the parameter</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.get_param_options", "modulename": "brukeropus.control.opus", "qualname": "Opus.get_param_options", "kind": "function", "doc": "<p>Get the parameter setting options for a three character parameter code. Only valid for\nenum type parameters (e.g. BMS, APT, DTC, etc...).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>param:</strong>  three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>options: list of valid options (strings) for the given parameter</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.get_version", "modulename": "brukeropus.control.opus", "qualname": "Opus.get_version", "kind": "function", "doc": "<p>Get the OPUS software version information</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.get_opus_path", "modulename": "brukeropus.control.opus", "qualname": "Opus.get_opus_path", "kind": "function", "doc": "<p>Get the absolute path to the OPUS software directory (where PARAMTEXT.bin and other instrument specific files\nare located)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.send_command", "modulename": "brukeropus.control.opus", "qualname": "Opus.send_command", "kind": "function", "doc": "<p>Used to send \"Direct Commands\" to the optics bench. Useful for manually moving motors, etc. from accessories\nand other low-level operations such as controlling the scanning mirror movement.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <p>send_command('VAC=5') # vents the sample compartment\n  send_command('VAC=4') # evacuates sample compartment</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>text_command:</strong>  string command as you would enter into \"Direct Command\" input of OPUS</li>\n<li><strong>timeout:</strong>  timeout in milliseconds to wait for response</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: parsed response from OPUS software (typically boolean confirmation)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text_command</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.evacuate_sample", "modulename": "brukeropus.control.opus", "qualname": "Opus.evacuate_sample", "kind": "function", "doc": "<p>Evacuates the sample compartment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.vent_sample", "modulename": "brukeropus.control.opus", "qualname": "Opus.vent_sample", "kind": "function", "doc": "<p>Vents the sample compartment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.close_flaps", "modulename": "brukeropus.control.opus", "qualname": "Opus.close_flaps", "kind": "function", "doc": "<p>Closes vacumm flaps between optics bench and sample compartment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.open_flaps", "modulename": "brukeropus.control.opus", "qualname": "Opus.open_flaps", "kind": "function", "doc": "<p>Opens vacumm flaps between optics bench and sample compartment</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.unload_file", "modulename": "brukeropus.control.opus", "qualname": "Opus.unload_file", "kind": "function", "doc": "<p>Unloads a file from the OPUS software from its <code>filepath</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath:</strong>  full path of the file to be unloaded in the software.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: <code>True</code> if successful.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.unload_all", "modulename": "brukeropus.control.opus", "qualname": "Opus.unload_all", "kind": "function", "doc": "<p>Unloads all files from OPUS software</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.measure_ref", "modulename": "brukeropus.control.opus", "qualname": "Opus.measure_ref", "kind": "function", "doc": "<p>Takes a reference measurement using the current settings from advanced experiment.  Also\ntakes option **kwargs input which use the OPUS 3-letter parameter keys and values as input\nto customize the measurement.  example:</p>\n\n<pre><code>measure_ref(nrs=100, res=4) # measures reference with current settings but overriding averages to 100 and\n    resolution to 4\n</code></pre>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeout:</strong>  timeout in milliseconds to wait for response</li>\n<li><strong>kwargs:</strong>  any valid three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>response: <code>True</code> if successful</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1000000</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.measure_sample", "modulename": "brukeropus.control.opus", "qualname": "Opus.measure_sample", "kind": "function", "doc": "<p>Takes a reference measurement using the current settings from advanced experiment.  Also\ntakes option **kwargs input which use the OPUS 3-letter parameter keys and values as input\nto customize the measurement.  example:</p>\n\n<pre><code>measure_sample(nss=100, res=4) # measures sample with current settings but overriding averages to 100 and\n    resolution to 4\n</code></pre>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unload:</strong>  whether to unload the file from OPUS after measurement is complete (to allow moving/renaming, etc.)</li>\n<li><strong>timeout:</strong>  timeout in milliseconds to wait for response</li>\n<li><strong>kwargs:</strong>  any valid three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>filepath: absolute filepath to measured sample file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unload</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1000000</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.check_signal", "modulename": "brukeropus.control.opus", "qualname": "Opus.check_signal", "kind": "function", "doc": "<p>Performs a quick (typically 1 sample) measurement using the current FTIR settings. Current settings can be\noverridden using **kwargs. After measurement is finished, the file is unloaded from OPUS and deleted. The\nfunction returns an <code>OPUSFile</code> object before it deletes the quick measurement file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nss:</strong>  number of sample scans to average (default is 1, i.e. no averaging)</li>\n<li><strong>kwargs:</strong>  any valid three character parameter code (case insensitive)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>opus_file: <code>OPUSFile</code> object generated by quick measurement</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nss</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.control.opus.Opus.save_ref", "modulename": "brukeropus.control.opus", "qualname": "Opus.save_ref", "kind": "function", "doc": "<p>Saves current reference to file (according to current filename and path set in advanced experiment) and\nreturns the filename.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>filepath: absolute path to saved reference file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file", "modulename": "brukeropus.file", "kind": "module", "doc": "<p>The <code>brukeropus.file</code> submodule of <code>brukeropus</code> includes all the functions and classes for reading and exploring OPUS\nfiles. This includes both high-level functions like <code>read_opus</code> that returns an <code>OPUSFile</code> class, as well as low-level\nparsing functions like <code>parse_directory</code> that returns data extracted directly from the binary OPUS file bytes.  This\noverview documentation will focus on the high-level functions which will be useful for most users.  If you are\ninterested in using the low-level parsing functions, perhaps to make your own data class or customize how files are\nread, refer to: <code>brukeropus.file.parser</code> which contains all the low-level parsing functions.</p>\n\n<h2 id=\"finding-opus-files\">Finding OPUS Files</h2>\n\n<p>OPUS files are typically saved with a numeric file extension (e.g. file.0, file.1, file.1001).  This makes searching for\na list of OPUS files in a directory a little more cumbersome than a traditional \"*.csv\" search.  To address this,\n<code>brukeropus</code> includes a <code>find_opus_files</code> function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">find_opus_files</span>\n\n<span class=\"n\">filepaths</span> <span class=\"o\">=</span> <span class=\"n\">find_opus_files</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;path\\to\\opus\\files&#39;</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Which will assign a list of filepaths that match the numeric extension formatting of OPUS files. For full documentation,\nsee <code>brukeropus.file.utils.find_opus_files</code>.</p>\n\n<h2 id=\"reading-opus-files\">Reading OPUS Files</h2>\n\n<p><code>brukeropus</code> parses OPUS files and assembles them into an <code>OPUSFile</code> object that contains the extracted data (and\nmetadata) within the file.  You can generate an <code>OPUSFile</code> object in one of two ways:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus</span> <span class=\"kn\">import</span> <span class=\"n\">read_opus</span><span class=\"p\">,</span> <span class=\"n\">OPUSFile</span>\n\n<span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;path\\to\\opusfile.0&#39;</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n<span class=\"n\">same_data</span> <span class=\"o\">=</span> <span class=\"n\">OPUSFile</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>In the above code, <code>data</code> and <code>same_data</code> are both <code>OPUSFile</code> objects with identical data.</p>\n\n<h2 id=\"using-the-opusfile-class\">Using the <code>OPUSFile</code> Class</h2>\n\n<p>OPUS files all start with the same first four <em>magic bytes</em>.  If the file does not start with these bytes (i.e. is not\na valid OPUS file), the OPUSFile class will logically evaluate to <code>false</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.pdf&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is not an OPUS file&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>To view all parameter metadata in the file, you can print to the console using the class method: <code>print_parameters</code>.\nThis will let you view all the key, value parameter data extracted from the file with labels for what the parameter keys\nare referring to wherever known.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">print_parameters</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p><details>\n<summary>Example <code>print_parameters</code> Output</summary></p>\n\n<p>\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                         Optical Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">ACC    Accessory                               TRANS *010A984F</span>\n<span class=\"go\">APR    ATR Pressure                            0</span>\n<span class=\"go\">APT    Aperture Setting                        1 mm</span>\n<span class=\"go\">BMS    Beamsplitter                            KBr-Broadband</span>\n<span class=\"go\">CHN    Measurement Channel                     Sample Compartment</span>\n<span class=\"go\">DTC    Detector                                RT-DLaTGS [Internal Pos.1]</span>\n<span class=\"go\">HPF    High Pass Filter                        0</span>\n<span class=\"go\">LPF    Low Pass Filter                         10.0</span>\n<span class=\"go\">LPV    Variable Low Pass Filter (cm-1)         4000</span>\n<span class=\"go\">OPF    Optical Filter Setting                  Open</span>\n<span class=\"go\">PGN    Preamplifier Gain                       3</span>\n<span class=\"go\">RDX    Extended Ready Check                    0</span>\n<span class=\"go\">SRC    Source                                  MIR</span>\n<span class=\"go\">VEL    Scanner Velocity                        10.0</span>\n<span class=\"go\">ADC    External Analog Signals                 0</span>\n<span class=\"go\">SON    External Sync                           Off</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                    Fourier Transform Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">APF    Apodization Function                    B3</span>\n<span class=\"go\">HFQ    End Frequency Limit for File            500.0</span>\n<span class=\"go\">LFQ    Start Frequency Limit for File          10000.0</span>\n<span class=\"go\">NLI    Nonlinearity Correction                 0</span>\n<span class=\"go\">PHR    Phase Resolution                        100.0</span>\n<span class=\"go\">PHZ    Phase Correction Mode                   ML</span>\n<span class=\"go\">SPZ    Stored Phase Mode                       NO</span>\n<span class=\"go\">ZFF    Zero Filling Factor                     2</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                       Acquisition Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">ADT    Additional Data Treatment               0</span>\n<span class=\"go\">AQM    Acquisition Mode                        DD</span>\n<span class=\"go\">CFE    Low Intensity Power Mode with DTGS      0</span>\n<span class=\"go\">COR    Correlation Test Mode                   0</span>\n<span class=\"go\">DEL    Delay Before Measurement                0</span>\n<span class=\"go\">DLY    Stabilization Delay                     0</span>\n<span class=\"go\">HFW    Wanted High Freq Limit                  15000.0</span>\n<span class=\"go\">LFW    Wanted Low Freq Limit                   0.0</span>\n<span class=\"go\">NSS    Number of Sample Scans                  50</span>\n<span class=\"go\">PLF    Result Spectrum Type                    AB</span>\n<span class=\"go\">RES    Resolution (cm-1)                       4.0</span>\n<span class=\"go\">SOT    Sample Scans or Time                    0</span>\n<span class=\"go\">TCL    Command Line for Additional Data Tr...</span>\n<span class=\"go\">TDL    To Do List                              16777271</span>\n<span class=\"go\">SGN    Sample Signal Gain                      1</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                      Sample Origin Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">BLD    Building</span>\n<span class=\"go\">CNM    Operator Name                           Duran</span>\n<span class=\"go\">CPY    Company</span>\n<span class=\"go\">DPM    Department</span>\n<span class=\"go\">EXP    Experiment                              MWIR-LWIR_Trans_FileNameFormat.XPM</span>\n<span class=\"go\">LCT    Location</span>\n<span class=\"go\">SFM    Sample Form                             Atm-MWIR (All A)</span>\n<span class=\"go\">SNM    Sample Name                             File Test</span>\n<span class=\"go\">XPP    Experiment Path                         C:\\Users\\Public\\Documents\\Bruker\\OPUS_8.1.29\\XPM</span>\n<span class=\"go\">IST    Instrument Status                       OK</span>\n<span class=\"go\">CPG    Character Encoding Code Page            1252</span>\n<span class=\"go\">UID    Universally Unique Identifier           0d1348c2-3a2c-41c9-b521-bdaf0a23710c</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                    Instrument Status Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">HFL    High Folding Limit                      15795.820598</span>\n<span class=\"go\">LFL    Low Folding Limit                       0.0</span>\n<span class=\"go\">LWN    Laser Wavenumber                        15795.820598</span>\n<span class=\"go\">ABP    Absolute Peak Pos in Laser*2            52159</span>\n<span class=\"go\">SSP    Sample Spacing Divisor                  1</span>\n<span class=\"go\">ASG    Actual Signal Gain                      1</span>\n<span class=\"go\">ARG    Actual Reference Gain                   1</span>\n<span class=\"go\">ASS    Number of Sample Scans                  50</span>\n<span class=\"go\">GFW    Number of Good Forward Scans            25</span>\n<span class=\"go\">GBW    Number of Good Backward Scans           25</span>\n<span class=\"go\">BFW    Number of Bad Forward Scans             0</span>\n<span class=\"go\">BBW    Number of Bad Backward Scans            0</span>\n<span class=\"go\">PKA    Peak Amplitude                          1409</span>\n<span class=\"go\">PKL    Peak Location                           7364</span>\n<span class=\"go\">PRA    Backward Peak Amplitude                 1356</span>\n<span class=\"go\">PRL    Backward Peak Location                  7363</span>\n<span class=\"go\">P2A    Peak Amplitude Channel 2                1</span>\n<span class=\"go\">P2L    Peak Location Channel 2                 1</span>\n<span class=\"go\">P2R    Backward Peak Amplitude Channel 2       1</span>\n<span class=\"go\">P2K    Backward Peak Location Channel 2        1</span>\n<span class=\"go\">DAQ    Data Acquisition Status                 0</span>\n<span class=\"go\">AG2    Actual Signal Gain Channel 2            1</span>\n<span class=\"go\">HUM    Relative Humidity Interferometer        14</span>\n<span class=\"go\">SSM    Sample Spacing Multiplier               1</span>\n<span class=\"go\">RSN    Running Sample Number                   565</span>\n<span class=\"go\">CRR    Correlation Rejection Reason            0</span>\n<span class=\"go\">SRT    Start Time (sec)                        1556890484.642</span>\n<span class=\"go\">DUR    Duration (sec)                          42.433990478515625</span>\n<span class=\"go\">TSC    Scanner Temperature                     27.8</span>\n<span class=\"go\">MVD    Max Velocity Deviation                  0.1158025860786438</span>\n<span class=\"go\">PRS    Pressure Interferometer (hPa)           1009.9999700000001</span>\n<span class=\"go\">AN1    Analog Signal 1                         0.22596596493037535</span>\n<span class=\"go\">AN2    Analog Signal 2                         3.459206583321489</span>\n<span class=\"go\">VSN    Firmware Version                        2.450 Oct 10 2014</span>\n<span class=\"go\">SRN    Instrument Serial Number                1135</span>\n<span class=\"go\">CAM    Coaddition Mode                         0</span>\n<span class=\"go\">INS    Instrument Type                         VERTEX 80V</span>\n<span class=\"go\">FOC    Focal Length                            100.0</span>\n<span class=\"go\">RDY    Ready Check                             1</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                               Reference Instrument Status Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">HFL    High Folding Limit                      15795.820598</span>\n<span class=\"go\">LFL    Low Folding Limit                       0.0</span>\n<span class=\"go\">LWN    Laser Wavenumber                        15795.820598</span>\n<span class=\"go\">ABP    Absolute Peak Pos in Laser*2            52159</span>\n<span class=\"go\">SSP    Sample Spacing Divisor                  1</span>\n<span class=\"go\">ARG    Actual Reference Gain                   1</span>\n<span class=\"go\">ASG    Actual Signal Gain                      1</span>\n<span class=\"go\">ASS    Number of Sample Scans                  1</span>\n<span class=\"go\">GFW    Number of Good Forward Scans            1</span>\n<span class=\"go\">GBW    Number of Good Backward Scans           0</span>\n<span class=\"go\">BFW    Number of Bad Forward Scans             0</span>\n<span class=\"go\">BBW    Number of Bad Backward Scans            0</span>\n<span class=\"go\">PKA    Peak Amplitude                          1644</span>\n<span class=\"go\">PKL    Peak Location                           7364</span>\n<span class=\"go\">PRA    Backward Peak Amplitude                 1</span>\n<span class=\"go\">PRL    Backward Peak Location                  -1</span>\n<span class=\"go\">P2A    Peak Amplitude Channel 2                1</span>\n<span class=\"go\">P2L    Peak Location Channel 2                 1</span>\n<span class=\"go\">P2R    Backward Peak Amplitude Channel 2       1</span>\n<span class=\"go\">P2K    Backward Peak Location Channel 2        1</span>\n<span class=\"go\">DAQ    Data Acquisition Status                 0</span>\n<span class=\"go\">AG2    Actual Signal Gain Channel 2            1</span>\n<span class=\"go\">HUM    Relative Humidity Interferometer        0</span>\n<span class=\"go\">SSM    Sample Spacing Multiplier               1</span>\n<span class=\"go\">RSN    Running Sample Number                   5816</span>\n<span class=\"go\">CRR    Correlation Rejection Reason            0</span>\n<span class=\"go\">SRT    Start Time (sec)                        1556890282.358</span>\n<span class=\"go\">DUR    Duration (sec)                          0.7919998168945312</span>\n<span class=\"go\">TSC    Scanner Temperature                     27.8</span>\n<span class=\"go\">MVD    Max Velocity Deviation                  0.10553144663572311</span>\n<span class=\"go\">PRS    Pressure Interferometer (hPa)           2.01999</span>\n<span class=\"go\">AN1    Analog Signal 1                         0.22577181458473206</span>\n<span class=\"go\">AN2    Analog Signal 2                         4.0960001945495605</span>\n<span class=\"go\">VSN    Firmware Version                        2.450 Oct 10 2014</span>\n<span class=\"go\">SRN    Instrument Serial Number                1135</span>\n<span class=\"go\">CAM    Coaddition Mode                         0</span>\n<span class=\"go\">INS    Instrument Type                         VERTEX 80V</span>\n<span class=\"go\">FOC    Focal Length                            100.0</span>\n<span class=\"go\">RDY    Ready Check                             1</span>\n<span class=\"go\">ARS    Number of Reference Scans               1</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                    Reference Optical Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">ACC    Accessory                               TRANS *010A984F</span>\n<span class=\"go\">APR    ATR Pressure                            0</span>\n<span class=\"go\">APT    Aperture Setting                        1 mm</span>\n<span class=\"go\">BMS    Beamsplitter                            KBr-Broadband</span>\n<span class=\"go\">DTC    Detector                                RT-DLaTGS [Internal Pos.1]</span>\n<span class=\"go\">HPF    High Pass Filter                        0</span>\n<span class=\"go\">LPF    Low Pass Filter                         10.0</span>\n<span class=\"go\">LPV    Variable Low Pass Filter (cm-1)         4000</span>\n<span class=\"go\">OPF    Optical Filter Setting                  Open</span>\n<span class=\"go\">PGR    Reference Preamplifier Gain             3</span>\n<span class=\"go\">RCH    Reference Measurement Channel           Sample Compartment</span>\n<span class=\"go\">RDX    Extended Ready Check                    0</span>\n<span class=\"go\">SRC    Source                                  MIR</span>\n<span class=\"go\">VEL    Scanner Velocity                        10.0</span>\n<span class=\"go\">ADC    External Analog Signals                 0</span>\n<span class=\"go\">SON    External Sync                           Off</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                                  Reference Acquisition Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">ADT    Additional Data Treatment               0</span>\n<span class=\"go\">AQM    Acquisition Mode                        DD</span>\n<span class=\"go\">CFE    Low Intensity Power Mode with DTGS      0</span>\n<span class=\"go\">COR    Correlation Test Mode                   0</span>\n<span class=\"go\">DEL    Delay Before Measurement                0</span>\n<span class=\"go\">DLY    Stabilization Delay                     0</span>\n<span class=\"go\">HFW    Wanted High Freq Limit                  15000.0</span>\n<span class=\"go\">LFW    Wanted Low Freq Limit                   0.0</span>\n<span class=\"go\">NSR    Number of Background Scans              1</span>\n<span class=\"go\">PLF    Result Spectrum Type                    TR</span>\n<span class=\"go\">RES    Resolution (cm-1)                       4.0</span>\n<span class=\"go\">RGN    Reference Signal Gain                   1</span>\n<span class=\"go\">STR    Scans or Time (Reference)               0</span>\n<span class=\"go\">TCL    Command Line for Additional Data Tr...</span>\n<span class=\"go\">TDL    To Do List                              16777271</span>\n\n<span class=\"go\">====================================================================================================</span>\n<span class=\"go\">                               Reference Fourier Transform Parameters</span>\n<span class=\"go\">Key    Label                                   Value</span>\n<span class=\"go\">APF    Apodization Function                    B3</span>\n<span class=\"go\">HFQ    End Frequency Limit for File            500.0</span>\n<span class=\"go\">LFQ    Start Frequency Limit for File          10000.0</span>\n<span class=\"go\">NLI    Nonlinearity Correction                 0</span>\n<span class=\"go\">PHR    Phase Resolution                        100.0</span>\n<span class=\"go\">PHZ    Phase Correction Mode                   ML</span>\n<span class=\"go\">SPZ    Stored Phase Mode                       NO</span>\n<span class=\"go\">ZFF    Zero Filling Factor                     2</span>\n</code></pre>\n</div>\n\n</p>\n\n<p></details></p>\n\n<p>You can access a specific parameter simply by calling the key as a direct attribute of the class (case insensitive). You\ncan also get the human-readable label using the <code>get_param_label</code> function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">brukeropus.file</span> <span class=\"kn\">import</span> <span class=\"n\">get_param_label</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_param_label</span><span class=\"p\">(</span><span class=\"s1\">&#39;bms&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">bms</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_param_label</span><span class=\"p\">(</span><span class=\"s1\">&#39;src&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">Beamsplitter: KBr-Broadband</span>\n<span class=\"go\">Source: MIR</span>\n</code></pre>\n</div>\n\n<p>You will notice in the example output that some keys (e.g. zero filling factor <code>zff</code>) may have two entries: one for the\nsample measurement and another for the reference.  By default, the sample parameters are accessible directly from the\n<code>OPUSFile</code> class, while the reference parameters can be accessed through the <code>rf_params</code> attribute.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Sample ZFF:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">zff</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Reference ZFF:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">rf_params</span><span class=\"o\">.</span><span class=\"n\">zff</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">Sample ZFF: 2 Reference ZFF: 2</span>\n</code></pre>\n</div>\n\n<p>You can also iterate over the parameters using the familiar <code>keys()</code>, <code>values()</code>, and <code>items()</code> functions using the\n<code>params</code> or <code>rf_params</code> attributes:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">acc: TRANS *010A984F</span>\n<span class=\"go\">apr: 0</span>\n<span class=\"go\">apt: 1 mm</span>\n<span class=\"go\">bms: KBr-Broadband</span>\n<span class=\"go\">chn: Sample Compartment</span>\n<span class=\"go\">dtc: RT-DLaTGS [Internal Pos.1]</span>\n<span class=\"go\">hpf: 0</span>\n<span class=\"go\">lpf: 10.0</span>\n<span class=\"go\">lpv: 4000</span>\n<span class=\"go\">opf: Open</span>\n<span class=\"go\">pgn: 3</span>\n<span class=\"go\">... continued ...</span>\n</code></pre>\n</div>\n\n<p>Depending on the settings used to save the OPUS file, different data blocks can be stored.  To retrieve a list of data\nblocks stored in the OPUS File, use the <code>data_keys</code> attribute:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data_keys</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">[&#39;igsm&#39;, &#39;phsm&#39;, &#39;sm&#39;, &#39;a&#39;, &#39;igrf&#39;, &#39;rf&#39;]</span>\n</code></pre>\n</div>\n\n<p>Each key is also an attribute of the <code>OPUSFile</code> instance that returns either a <code>Data</code> or <code>Data3D</code> class.  You can get\nthe <code>x</code> and <code>y</code> array values (in the units they were saved in) as direct attributes to the <code>Data</code> class:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>For spectra with wavenumber as valid unit (e.g. single-channel or ratioed spectra), the <code>x</code> array can be given in <code>cm\u207b\u00b9</code>\nor <code>\u00b5m</code> units by using the attributes <code>wn</code> or <code>wl</code> respectively:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">wl</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>You can also iterate over all data spectra in the file using the <code>iter_data()</code> method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">iter_data</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"s1\">&#39;(&#39;</span> <span class=\"o\">+</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;)&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">Sample Interferogram (2019-05-03 13:34:44.641000)</span>\n<span class=\"go\">Sample Phase (2019-05-03 13:34:44.641000)</span>\n<span class=\"go\">Sample Spectrum (2019-05-03 13:34:44.641000)</span>\n<span class=\"go\">Absorbance (2019-05-03 13:34:44.641000)</span>\n<span class=\"go\">Reference Interferogram (2019-05-03 13:31:22.358000)</span>\n<span class=\"go\">Reference Spectrum (2019-05-03 13:31:22.358000)</span>\n</code></pre>\n</div>\n\n<p>Each data block in an OPUS file also contains a small parameter block with information such as the min/max y-value\n(mny, mxy), x-units (dxu), number of data points (npt), etc.  These can be accessed as direct attributes to the <code>Data</code>\nclass, or through the <code>params</code> attribute:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.0&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Sample spectra y-min:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">mny</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y-max:&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">mxy</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"go\">Sample spectra y-min: 1.2147593224653974e-05 y-max: 0.03543896973133087</span>\n</code></pre>\n</div>\n\n<p>For full API documentation, see: <br />\n<code>OPUSFile</code>: <code>brukeropus.file.file.OPUSFile</code> <br />\n<code>Data</code>: <code>brukeropus.file.file.Data</code> <br />\n<code>Data3D</code>: <code>brukeropus.file.file.Data3D</code></p>\n"}, {"fullname": "brukeropus.file.constants", "modulename": "brukeropus.file.constants", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.constants.PARAM_LABELS", "modulename": "brukeropus.file.constants", "qualname": "PARAM_LABELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ACC&#x27;: &#x27;Accessory&#x27;, &#x27;ABP&#x27;: &#x27;Absolute Peak Pos in Laser*2&#x27;, &#x27;ADC&#x27;: &#x27;External Analog Signals&#x27;, &#x27;ADT&#x27;: &#x27;Additional Data Treatment&#x27;, &#x27;AG2&#x27;: &#x27;Actual Signal Gain Channel 2&#x27;, &#x27;AN1&#x27;: &#x27;Analog Signal 1&#x27;, &#x27;AN2&#x27;: &#x27;Analog Signal 2&#x27;, &#x27;APF&#x27;: &#x27;Apodization Function&#x27;, &#x27;APR&#x27;: &#x27;ATR Pressure&#x27;, &#x27;APT&#x27;: &#x27;Aperture Setting&#x27;, &#x27;AQM&#x27;: &#x27;Acquisition Mode&#x27;, &#x27;ARG&#x27;: &#x27;Actual Reference Gain&#x27;, &#x27;ARS&#x27;: &#x27;Number of Reference Scans&#x27;, &#x27;ASG&#x27;: &#x27;Actual Signal Gain&#x27;, &#x27;ASS&#x27;: &#x27;Number of Sample Scans&#x27;, &#x27;BBW&#x27;: &#x27;Number of Bad Backward Scans&#x27;, &#x27;BFW&#x27;: &#x27;Number of Bad Forward Scans&#x27;, &#x27;BLD&#x27;: &#x27;Building&#x27;, &#x27;BMS&#x27;: &#x27;Beamsplitter&#x27;, &#x27;CAM&#x27;: &#x27;Coaddition Mode&#x27;, &#x27;CFE&#x27;: &#x27;Low Intensity Power Mode with DTGS&#x27;, &#x27;CHN&#x27;: &#x27;Measurement Channel&#x27;, &#x27;CNM&#x27;: &#x27;Operator Name&#x27;, &#x27;COR&#x27;: &#x27;Correlation Test Mode&#x27;, &#x27;CPG&#x27;: &#x27;Character Encoding Code Page&#x27;, &#x27;CPY&#x27;: &#x27;Company&#x27;, &#x27;CRR&#x27;: &#x27;Correlation Rejection Reason&#x27;, &#x27;CSF&#x27;: &#x27;Y Scaling Factor&#x27;, &#x27;DAQ&#x27;: &#x27;Data Acquisition Status&#x27;, &#x27;DAT&#x27;: &#x27;Date of Measurement&#x27;, &#x27;DEL&#x27;: &#x27;Delay Before Measurement&#x27;, &#x27;DLY&#x27;: &#x27;Stabilization Delay&#x27;, &#x27;DPF&#x27;: &#x27;Data Point Format&#x27;, &#x27;DPM&#x27;: &#x27;Department&#x27;, &#x27;DTC&#x27;: &#x27;Detector&#x27;, &#x27;DUR&#x27;: &#x27;Duration (sec)&#x27;, &#x27;DXU&#x27;: &#x27;X Units&#x27;, &#x27;DYU&#x27;: &#x27;Y Units&#x27;, &#x27;EXP&#x27;: &#x27;Experiment&#x27;, &#x27;FOC&#x27;: &#x27;Focal Length&#x27;, &#x27;FXV&#x27;: &#x27;First X Value&#x27;, &#x27;GBW&#x27;: &#x27;Number of Good Backward Scans&#x27;, &#x27;GFW&#x27;: &#x27;Number of Good Forward Scans&#x27;, &#x27;HFF&#x27;: &#x27;Digital Filter High Folding Limit&#x27;, &#x27;HFL&#x27;: &#x27;High Folding Limit&#x27;, &#x27;HFQ&#x27;: &#x27;End Frequency Limit for File&#x27;, &#x27;HFW&#x27;: &#x27;Wanted High Freq Limit&#x27;, &#x27;HPF&#x27;: &#x27;High Pass Filter&#x27;, &#x27;HUM&#x27;: &#x27;Relative Humidity Interferometer&#x27;, &#x27;INS&#x27;: &#x27;Instrument Type&#x27;, &#x27;IST&#x27;: &#x27;Instrument Status&#x27;, &#x27;LCT&#x27;: &#x27;Location&#x27;, &#x27;LFF&#x27;: &#x27;Digital Filter Low Folding Limit&#x27;, &#x27;LFL&#x27;: &#x27;Low Folding Limit&#x27;, &#x27;LFQ&#x27;: &#x27;Start Frequency Limit for File&#x27;, &#x27;LFW&#x27;: &#x27;Wanted Low Freq Limit&#x27;, &#x27;LPF&#x27;: &#x27;Low Pass Filter&#x27;, &#x27;LPV&#x27;: &#x27;Variable Low Pass Filter (cm-1)&#x27;, &#x27;LWN&#x27;: &#x27;Laser Wavenumber&#x27;, &#x27;LXV&#x27;: &#x27;Last X Value&#x27;, &#x27;MNY&#x27;: &#x27;Y Minimum&#x27;, &#x27;MVD&#x27;: &#x27;Max Velocity Deviation&#x27;, &#x27;MXY&#x27;: &#x27;Y Maximum&#x27;, &#x27;NFL&#x27;: &#x27;Nominal FW Peak Pos in Points&#x27;, &#x27;NLA&#x27;: &#x27;NL Alpha&#x27;, &#x27;NLB&#x27;: &#x27;NL Beta&#x27;, &#x27;NLI&#x27;: &#x27;Nonlinearity Correction&#x27;, &#x27;NPT&#x27;: &#x27;Number of Data Points&#x27;, &#x27;NSN&#x27;: &#x27;Scan Number&#x27;, &#x27;NSR&#x27;: &#x27;Number of Background Scans&#x27;, &#x27;NSS&#x27;: &#x27;Number of Sample Scans&#x27;, &#x27;OPF&#x27;: &#x27;Optical Filter Setting&#x27;, &#x27;P2A&#x27;: &#x27;Peak Amplitude Channel 2&#x27;, &#x27;P2K&#x27;: &#x27;Backward Peak Location Channel 2&#x27;, &#x27;P2L&#x27;: &#x27;Peak Location Channel 2&#x27;, &#x27;P2R&#x27;: &#x27;Backward Peak Amplitude Channel 2&#x27;, &#x27;PGN&#x27;: &#x27;Preamplifier Gain&#x27;, &#x27;PGR&#x27;: &#x27;Reference Preamplifier Gain&#x27;, &#x27;PHR&#x27;: &#x27;Phase Resolution&#x27;, &#x27;PHZ&#x27;: &#x27;Phase Correction Mode&#x27;, &#x27;PKA&#x27;: &#x27;Peak Amplitude&#x27;, &#x27;PKL&#x27;: &#x27;Peak Location&#x27;, &#x27;PLF&#x27;: &#x27;Result Spectrum Type&#x27;, &#x27;PRA&#x27;: &#x27;Backward Peak Amplitude&#x27;, &#x27;PRL&#x27;: &#x27;Backward Peak Location&#x27;, &#x27;PRS&#x27;: &#x27;Pressure Interferometer (hPa)&#x27;, &#x27;RCH&#x27;: &#x27;Reference Measurement Channel&#x27;, &#x27;RDX&#x27;: &#x27;Extended Ready Check&#x27;, &#x27;RDY&#x27;: &#x27;Ready Check&#x27;, &#x27;RES&#x27;: &#x27;Resolution (cm-1)&#x27;, &#x27;RG2&#x27;: &#x27;Signal Gain, Background 2nd Channel&#x27;, &#x27;RGN&#x27;: &#x27;Reference Signal Gain&#x27;, &#x27;RSN&#x27;: &#x27;Running Sample Number&#x27;, &#x27;SFM&#x27;: &#x27;Sample Form&#x27;, &#x27;SG2&#x27;: &#x27;Signal Gain, Sample 2nd Channel&#x27;, &#x27;SGN&#x27;: &#x27;Sample Signal Gain&#x27;, &#x27;SNM&#x27;: &#x27;Sample Name&#x27;, &#x27;SON&#x27;: &#x27;External Sync&#x27;, &#x27;SOT&#x27;: &#x27;Sample Scans or Time&#x27;, &#x27;SPO&#x27;: &#x27;Sample Number&#x27;, &#x27;SPZ&#x27;: &#x27;Stored Phase Mode&#x27;, &#x27;SRC&#x27;: &#x27;Source&#x27;, &#x27;SRN&#x27;: &#x27;Instrument Serial Number&#x27;, &#x27;SRT&#x27;: &#x27;Start Time (sec)&#x27;, &#x27;SSM&#x27;: &#x27;Sample Spacing Multiplier&#x27;, &#x27;SSP&#x27;: &#x27;Sample Spacing Divisor&#x27;, &#x27;STR&#x27;: &#x27;Scans or Time (Reference)&#x27;, &#x27;TCL&#x27;: &#x27;Command Line for Additional Data Treatment&#x27;, &#x27;TDL&#x27;: &#x27;To Do List&#x27;, &#x27;TIM&#x27;: &#x27;Time of Measurement&#x27;, &#x27;TPX&#x27;: &#x27;Total Points X&#x27;, &#x27;TSC&#x27;: &#x27;Scanner Temperature&#x27;, &#x27;UID&#x27;: &#x27;Universally Unique Identifier&#x27;, &#x27;VEL&#x27;: &#x27;Scanner Velocity&#x27;, &#x27;VSN&#x27;: &#x27;Firmware Version&#x27;, &#x27;WAS&#x27;: &#x27;Tr.Rec. Slices&#x27;, &#x27;WDV&#x27;: &#x27;Transient Recorder&#x27;, &#x27;WIB&#x27;: &#x27;Tr.Rec.Input Range 2nd channel&#x27;, &#x27;WIR&#x27;: &#x27;Tr.Rec.Input Range&#x27;, &#x27;WPD&#x27;: &#x27;Tr.Rec. Stab. Delay after Stepping&#x27;, &#x27;WRC&#x27;: &#x27;Tr.Rec. Repeat Count&#x27;, &#x27;WSS&#x27;: &#x27;Tr.Rec. Sampling Source&#x27;, &#x27;WTD&#x27;: &#x27;Tr.Rec. trigger Delay in points&#x27;, &#x27;WTR&#x27;: &#x27;Tr.Rec. Resolution&#x27;, &#x27;WXD&#x27;: &#x27;Tr.Rec. Experiment Delay&#x27;, &#x27;WXP&#x27;: &#x27;Tr.Rec. Trigger Mode&#x27;, &#x27;XPP&#x27;: &#x27;Experiment Path&#x27;, &#x27;XSM&#x27;: &#x27;Xs Sampling Mode&#x27;, &#x27;ZFF&#x27;: &#x27;Zero Filling Factor&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_0", "modulename": "brukeropus.file.constants", "qualname": "CODE_0", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Real Part of Complex Data&#x27;, 2: &#x27;Imaginary Part of Complex Data&#x27;, 3: &#x27;&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_1", "modulename": "brukeropus.file.constants", "qualname": "CODE_1", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Sample&#x27;, 2: &#x27;Reference&#x27;, 3: &#x27;&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_2", "modulename": "brukeropus.file.constants", "qualname": "CODE_2", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Data Status Parameters&#x27;, 2: &#x27;Instrument Status Parameters&#x27;, 3: &#x27;Acquisition Parameters&#x27;, 4: &#x27;Fourier Transform Parameters&#x27;, 5: &#x27;Plot and Display Parameters&#x27;, 6: &#x27;Optical Parameters&#x27;, 7: &#x27;GC Parameters&#x27;, 8: &#x27;Library Search Parameters&#x27;, 9: &#x27;Communication Parameters&#x27;, 10: &#x27;Sample Origin Parameters&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_3", "modulename": "brukeropus.file.constants", "qualname": "CODE_3", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Spectrum&#x27;, 2: &#x27;Interferogram&#x27;, 3: &#x27;Phase&#x27;, 4: &#x27;Absorbance&#x27;, 5: &#x27;Transmittance&#x27;, 6: &#x27;Kubelka-Munk&#x27;, 7: &#x27;Trace (Intensity over time)&#x27;, 8: &#x27;gc File, Series of Interferograms&#x27;, 9: &#x27;gc File, Series of Spectra&#x27;, 10: &#x27;Raman&#x27;, 11: &#x27;Emisson&#x27;, 12: &#x27;Reflectance&#x27;, 13: &#x27;Directory&#x27;, 14: &#x27;Power&#x27;, 15: &#x27;log Reflectance&#x27;, 16: &#x27;ATR&#x27;, 17: &#x27;Photoacoustic&#x27;, 18: &#x27;Result of Arithmatics, looks like Transmittance&#x27;, 19: &#x27;Result of Arithmatics, looks like Absorbance&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_4", "modulename": "brukeropus.file.constants", "qualname": "CODE_4", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;First Derivative&#x27;, 2: &#x27;Second Derivative&#x27;, 3: &#x27;n-th Derivative&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_5", "modulename": "brukeropus.file.constants", "qualname": "CODE_5", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;Compound Information&#x27;, 2: &#x27;Peak Table&#x27;, 3: &#x27;Molecular Structure&#x27;, 4: &#x27;Macro&#x27;, 5: &#x27;File Log&#x27;}"}, {"fullname": "brukeropus.file.constants.CODE_3_ABR", "modulename": "brukeropus.file.constants", "qualname": "CODE_3_ABR", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;&#x27;, 1: &#x27;&#x27;, 2: &#x27;ig&#x27;, 3: &#x27;ph&#x27;, 4: &#x27;a&#x27;, 5: &#x27;t&#x27;, 6: &#x27;km&#x27;, 7: &#x27;tr&#x27;, 8: &#x27;gcig&#x27;, 9: &#x27;gcsc&#x27;, 10: &#x27;ra&#x27;, 11: &#x27;e&#x27;, 12: &#x27;r&#x27;, 13: &#x27;dir&#x27;, 14: &#x27;p&#x27;, 15: &#x27;logr&#x27;, 16: &#x27;atr&#x27;, 17: &#x27;pas&#x27;, 18: &#x27;arit&#x27;, 19: &#x27;aria&#x27;}"}, {"fullname": "brukeropus.file.constants.TYPE_CODE_LABELS", "modulename": "brukeropus.file.constants", "qualname": "TYPE_CODE_LABELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[{0: &#x27;&#x27;, 1: &#x27;Real Part of Complex Data&#x27;, 2: &#x27;Imaginary Part of Complex Data&#x27;, 3: &#x27;&#x27;}, {0: &#x27;&#x27;, 1: &#x27;Sample&#x27;, 2: &#x27;Reference&#x27;, 3: &#x27;&#x27;}, {0: &#x27;&#x27;, 1: &#x27;Data Status Parameters&#x27;, 2: &#x27;Instrument Status Parameters&#x27;, 3: &#x27;Acquisition Parameters&#x27;, 4: &#x27;Fourier Transform Parameters&#x27;, 5: &#x27;Plot and Display Parameters&#x27;, 6: &#x27;Optical Parameters&#x27;, 7: &#x27;GC Parameters&#x27;, 8: &#x27;Library Search Parameters&#x27;, 9: &#x27;Communication Parameters&#x27;, 10: &#x27;Sample Origin Parameters&#x27;}, {0: &#x27;&#x27;, 1: &#x27;Spectrum&#x27;, 2: &#x27;Interferogram&#x27;, 3: &#x27;Phase&#x27;, 4: &#x27;Absorbance&#x27;, 5: &#x27;Transmittance&#x27;, 6: &#x27;Kubelka-Munk&#x27;, 7: &#x27;Trace (Intensity over time)&#x27;, 8: &#x27;gc File, Series of Interferograms&#x27;, 9: &#x27;gc File, Series of Spectra&#x27;, 10: &#x27;Raman&#x27;, 11: &#x27;Emisson&#x27;, 12: &#x27;Reflectance&#x27;, 13: &#x27;Directory&#x27;, 14: &#x27;Power&#x27;, 15: &#x27;log Reflectance&#x27;, 16: &#x27;ATR&#x27;, 17: &#x27;Photoacoustic&#x27;, 18: &#x27;Result of Arithmatics, looks like Transmittance&#x27;, 19: &#x27;Result of Arithmatics, looks like Absorbance&#x27;}, {0: &#x27;&#x27;, 1: &#x27;First Derivative&#x27;, 2: &#x27;Second Derivative&#x27;, 3: &#x27;n-th Derivative&#x27;}, {0: &#x27;&#x27;, 1: &#x27;Compound Information&#x27;, 2: &#x27;Peak Table&#x27;, 3: &#x27;Molecular Structure&#x27;, 4: &#x27;Macro&#x27;, 5: &#x27;File Log&#x27;}]"}, {"fullname": "brukeropus.file.constants.STRUCT_3D_INFO_BLOCK", "modulename": "brukeropus.file.constants", "qualname": "STRUCT_3D_INFO_BLOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "[{&#x27;key&#x27;: &#x27;nss&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;nsr&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;nsn&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;npt&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;gfw&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;gbw&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;bfw&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;bbw&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;hfl&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;lfl&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;hff&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;lff&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;filter_size&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;filter_type&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;fxv&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;lxv&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;mny&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;mxy&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;csf&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;pka&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;pra&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;pkl&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;prl&#x27;, &#x27;fmt&#x27;: &#x27;l&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.int32&#x27;&gt;}, {&#x27;key&#x27;: &#x27;srt&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}, {&#x27;key&#x27;: &#x27;tim&#x27;, &#x27;fmt&#x27;: &#x27;d&#x27;, &#x27;dtype&#x27;: &lt;class &#x27;numpy.float64&#x27;&gt;}]"}, {"fullname": "brukeropus.file.constants.Y_LABELS", "modulename": "brukeropus.file.constants", "qualname": "Y_LABELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;sm&#x27;: &#x27;Sample Spectrum&#x27;, &#x27;rf&#x27;: &#x27;Reference Spectrum&#x27;, &#x27;igsm&#x27;: &#x27;Sample Interferogram&#x27;, &#x27;igrf&#x27;: &#x27;Reference Interferogram&#x27;, &#x27;phsm&#x27;: &#x27;Sample Phase&#x27;, &#x27;phrf&#x27;: &#x27;Reference Phase&#x27;, &#x27;a&#x27;: &#x27;Absorbance&#x27;, &#x27;t&#x27;: &#x27;Transmittance&#x27;, &#x27;r&#x27;: &#x27;Reflectance&#x27;, &#x27;km&#x27;: &#x27;Kubelka-Munk&#x27;, &#x27;tr&#x27;: &#x27;Trace (Intensity over Time)&#x27;, &#x27;gcig&#x27;: &#x27;gc File (Series of Interferograms)&#x27;, &#x27;gcsc&#x27;: &#x27;gc File (Series of Spectra)&#x27;, &#x27;ra&#x27;: &#x27;Raman&#x27;, &#x27;e&#x27;: &#x27;Emission&#x27;, &#x27;dir&#x27;: &#x27;Directory&#x27;, &#x27;p&#x27;: &#x27;Power&#x27;, &#x27;logr&#x27;: &#x27;log(Reflectance)&#x27;, &#x27;atr&#x27;: &#x27;ATR&#x27;, &#x27;pas&#x27;: &#x27;Photoacoustic&#x27;}"}, {"fullname": "brukeropus.file.constants.XUN_LABELS", "modulename": "brukeropus.file.constants", "qualname": "XUN_LABELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;wl&#x27;: &#x27;Wavelength&#x27;, &#x27;wn&#x27;: &#x27;Wavenumber&#x27;, &#x27;f&#x27;: &#x27;Frequency&#x27;, &#x27;pnt&#x27;: &#x27;Points&#x27;, &#x27;min&#x27;: &#x27;Minutes&#x27;, &#x27;logwn&#x27;: &#x27;Log Wavenumber&#x27;}"}, {"fullname": "brukeropus.file.file", "modulename": "brukeropus.file.file", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.read_opus", "modulename": "brukeropus.file.file", "qualname": "read_opus", "kind": "function", "doc": "<p>Return an <code>OPUSFile</code> object from an OPUS file filepath.</p>\n\n<h6 id=\"the-following-produces-identical-results\">The following produces identical results:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_opus</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">OPUSFile</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n</code></pre>\n  </div>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath (str or Path):</strong>  filepath of an OPUS file (typically *.0)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>opus_file (<code>OPUSFile</code>): an instance of the <code>OPUSFile</code> class containing all data/metadata extracted from the\n  file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.OPUSFile", "modulename": "brukeropus.file.file", "qualname": "OPUSFile", "kind": "class", "doc": "<p>Class that contains the data and metadata contained in a bruker OPUS file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath:</strong>  full path to the OPUS file to be parsed. Can be a string or Path object and is required to initilize\nan <code>OPUSFile</code> object.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>is_opus (<code>bool</code>):</strong>  True if filepath points to an OPUS file, False otherwise. Also returned for dunder \n<code>__bool__()</code>  </li>\n<li><strong>params (<code>Parameters</code>):</strong>  class containing all general parameter metadata for the OPUS file. To save typing, the\nthree char parameters from params also become attributes of the <code>OPUSFile</code> class (e.g. bms, apt, src)  </li>\n<li><strong>rf_params (<code>Parameters</code>):</strong>  class containing all reference parameter metadata for the OPUS file.  </li>\n<li><strong>data_keys (list):</strong>  list of all data block keys stored in the file (i.e. sm, rf, t, a, r, igsm, igrf, phsm, etc.).\nThese keys become data attributes of the class which return an instance of <code>Data</code> or <code>Data3D</code>.</li>\n<li><strong>datetime (<code>datetime</code>):</strong>  Returns the most recent datetime of all the data blocks stored in the file (typically\nresult spectra)</li>\n<li><strong>directory (<code>FileDirectory</code>):</strong>   class containing information about all the various data blocks in the file.</li>\n<li><strong>file_log (str):</strong>  File log containing text about how the file was generated/edited (not always saved)</li>\n</ul>\n\n<h6 id=\"data-attributes\">Data Attributes:</h6>\n\n<blockquote>\n  <p><strong>sm:</strong> Single-channel sample spectra <br />\n  <strong>rf:</strong> Single-channel reference spectra <br />\n  <strong>igsm:</strong> Sample interferogram <br />\n  <strong>igrf:</strong> Reference interferogram <br />\n  <strong>phsm:</strong> Sample phase <br />\n  <strong>phrf:</strong> Reference phase <br />\n  <strong>a:</strong> Absorbance <br />\n  <strong>t:</strong> Transmittance <br />\n  <strong>r:</strong> Reflectance <br />\n  <strong>km:</strong> Kubelka-Munk <br />\n  <strong>tr:</strong> Trace (Intensity over Time) <br />\n  <strong>gcig:</strong> gc File (Series of Interferograms) <br />\n  <strong>gcsc:</strong> gc File (Series of Spectra) <br />\n  <strong>ra:</strong> Raman <br />\n  <strong>e:</strong> Emission <br />\n  <strong>dir:</strong> Directory <br />\n  <strong>p:</strong> Power <br />\n  <strong>logr:</strong> log(Reflectance) <br />\n  <strong>atr:</strong> ATR <br />\n  <strong>pas:</strong> Photoacoustic</p>\n</blockquote>\n"}, {"fullname": "brukeropus.file.file.OPUSFile.__init__", "modulename": "brukeropus.file.file", "qualname": "OPUSFile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "brukeropus.file.file.OPUSFile.filepath", "modulename": "brukeropus.file.file", "qualname": "OPUSFile.filepath", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.OPUSFile.print_parameters", "modulename": "brukeropus.file.file", "qualname": "OPUSFile.print_parameters", "kind": "function", "doc": "<p>Prints all the parameter metadata to the console (organized by block)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key_width</span><span class=\"o\">=</span><span class=\"mi\">7</span>, </span><span class=\"param\"><span class=\"n\">label_width</span><span class=\"o\">=</span><span class=\"mi\">40</span>, </span><span class=\"param\"><span class=\"n\">value_width</span><span class=\"o\">=</span><span class=\"mi\">53</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.OPUSFile.iter_data", "modulename": "brukeropus.file.file", "qualname": "OPUSFile.iter_data", "kind": "function", "doc": "<p>Generator that yields the various Data classes from the OPUSFile</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo", "kind": "class", "doc": "<p>Contains type, size and location information about an OPUS file block.</p>\n\n<p>This information is parsed from the directory block of an OPUS file and provides the information needed to parse the\nblock.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_type:</strong>  six integer tuple that describes the type of data in the file block</li>\n<li><strong>size:</strong>  size of block in number of bytes</li>\n<li><strong>start:</strong>  pointer to start location of the block within the file.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>type:</strong>  six integer tuple that describes the type of data in the file block</li>\n<li><strong>size:</strong>  size of block in number of bytes</li>\n<li><strong>start:</strong>  pointer to start location of the block within the file</li>\n<li><strong>keys:</strong>  tuple of three char keys contained in parameter blocks. This attribute is set by the OPUSFile class only\nwhen the block is parameter block. This enables grouping parameters by block if desired.</li>\n<li><strong>bytes:</strong>  raw bytes of file block (currently only set for unknown blocks)</li>\n</ul>\n"}, {"fullname": "brukeropus.file.file.FileBlockInfo.__init__", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_type</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "brukeropus.file.file.FileBlockInfo.keys", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.keys", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple"}, {"fullname": "brukeropus.file.file.FileBlockInfo.type", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileBlockInfo.size", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileBlockInfo.start", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_data_status", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_data_status", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a data status parameter block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_rf_param", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_rf_param", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a parameter block associated with the reference measurement</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_param", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_param", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a parameter block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_directory", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_directory", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is the directory block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_file_log", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_file_log", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is the file log block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_data", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_data", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a data block or 3D data block</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_3d_data", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_3d_data", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a 3D data block (i.e. data series)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.is_data_status_match", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.is_data_status_match", "kind": "function", "doc": "<p>Returns True if FileBlockInfo is a data status block and a match to the data_block_info argument.</p>\n\n<p>This function is used to match a data status block (contains metadata for data block) with its associated data\nblock (contains array data).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_block_info (FileBlockInfo):</strong>   data block being tested as a match.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>is_match (bool): True if FileBlockInfo is data status block and input argument is matching data block</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_block_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.get_label", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.get_label", "kind": "function", "doc": "<p>Returns a friendly string label that describes the block type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.get_data_key", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.get_data_key", "kind": "function", "doc": "<p>If block is a data block, this function will return an shorthand key to reference that data.</p>\n\n<p>e.g. t: transmission, a: absorption, sm: sample, rf: reference, smph: sample phase etc. If the block is not\na data block, it will return None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.FileBlockInfo.bytes", "modulename": "brukeropus.file.file", "qualname": "FileBlockInfo.bytes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data", "modulename": "brukeropus.file.file", "qualname": "Data", "kind": "class", "doc": "<p>Class containing array data and associated parameter/metadata from an OPUS file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes from OPUS file. see: <code>read_opus_file_bytes</code></li>\n<li><strong>data_info:</strong>  <code>FileBlockInfo</code> instance of a data block</li>\n<li><strong>data_status_info:</strong>  <code>FileBlockInfo</code> instance of a data status block which contains metadata about the data_info\nblock. This block is a parameter block.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>params:</strong>  <code>Parameter</code> class with metadata associated with the data block such as first x point: <code>fxp</code>, last x\npoint: <code>lxp</code>, number of points: <code>npt</code>, date: <code>dat</code>, time: <code>tim</code> etc.</li>\n<li><strong>y:</strong>  1D <code>numpy</code> array containing y values of data block</li>\n<li><strong>x:</strong>  1D <code>numpy</code> array containing x values of data block. Units of x array are given by <code>dxu</code> parameter.</li>\n<li><strong>label:</strong>  human-readable string label describing the data block (e.g. Sample Spectrum, Absorbance, etc.)</li>\n</ul>\n\n<h6 id=\"extended-attributes\">Extended Attributes:</h6>\n\n<blockquote>\n  <p><strong>wn:</strong> Returns the x array in wavenumber (cm\u207b\u00b9) units regardless of what units the x array was originally\n      saved in. This is only valid for spectral data blocks such as sample, reference, transmission, etc., not\n      interferogram or phase blocks. <br />\n  <strong>wl:</strong> Returns the x array in wavelength (\u00b5m) units regardless of what units the x array was originally\n      saved in. This is only valid for spectral data blocks such as sample, reference, transmission, etc., not\n      interferogram or phase blocks. <br />\n  <strong>f:</strong> Returns the x array in modulation frequency units (Hz) regardless of what units the x array was\n      originally saved in. This is only valid for spectral data blocks such as sample, reference, transmission,\n      etc., not interferogram or phase blocks. <br />\n  <strong>datetime:</strong> Returns a <code>datetime</code> class of when the data was taken (extracted from data status parameter block). <br />\n  <strong>xxx:</strong> the various three char parameter keys from the <code>params</code> attribute can be directly called from the \n      <code>Data</code> class for convenience. Common parameters include <code>dxu</code> (x units), <code>mxy</code> (max y value), <code>mny</code> (min y\n      value), etc.</p>\n</blockquote>\n"}, {"fullname": "brukeropus.file.file.Data.__init__", "modulename": "brukeropus.file.file", "qualname": "Data.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">data_info</span><span class=\"p\">:</span> <span class=\"n\">brukeropus</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">FileBlockInfo</span>,</span><span class=\"param\">\t<span class=\"n\">data_status_info</span><span class=\"p\">:</span> <span class=\"n\">brukeropus</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">FileBlockInfo</span></span>)</span>"}, {"fullname": "brukeropus.file.file.Data.params", "modulename": "brukeropus.file.file", "qualname": "Data.params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data.y", "modulename": "brukeropus.file.file", "qualname": "Data.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data.x", "modulename": "brukeropus.file.file", "qualname": "Data.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data.label", "modulename": "brukeropus.file.file", "qualname": "Data.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data.vel", "modulename": "brukeropus.file.file", "qualname": "Data.vel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D", "modulename": "brukeropus.file.file", "qualname": "Data3D", "kind": "class", "doc": "<p>Class containing 3D array data (series of spectra) and associated parameter/metadata from an OPUS file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes from OPUS file. see: read_opus_file_bytes</li>\n<li><strong>data_info:</strong>  FileBlockInfo instance of a 3D data block</li>\n<li><strong>data_status_info:</strong>  FileBlockInfo instance of a data status block which contains metadata about the data_info\nblock. This block is a parameter block.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>params:</strong>  Parameter class with metadata associated with the data block such as first x point (fxp), last x point\n(lxp), number of points (npt), date (dat), time (tim) etc.</li>\n<li><strong>y:</strong>  2D numpy array containing y values of data block</li>\n<li><strong>x:</strong>  1D numpy array containing x values of data block. Units of x array are given by .dxu attribute.</li>\n<li><strong>num_spectra:</strong>  number of spectra in the series (i.e. length of y)</li>\n<li><strong>label:</strong>  human-readable string label describing the data block (e.g. Sample Spectrum, Absorbance, etc.)</li>\n</ul>\n\n<h6 id=\"extended-attributes\">Extended Attributes:</h6>\n\n<blockquote>\n  <p><strong>wn:</strong> Returns the x array in wavenumber (cm\u207b\u00b9) units regardless of what units the x array was originally saved\n      in. This is only valid for spectral data blocks such as sample, reference, transmission, etc., not\n      interferogram or phase blocks. <br />\n  <strong>wl:</strong> Returns the x array in wavelength (\u00b5m) units regardless of what units the x array was originally saved\n      in. This is only valid for spectral data blocks such as sample, reference, transmission, etc., not\n      interferogram or phase blocks. <br />\n  <strong>datetime:</strong> Returns a <code>datetime</code> class of when the data was taken (extracted from data status parameter\n      block). <br />\n  <strong>xxx:</strong> the various three char parameter keys from the \"params\" attribute can be directly called from the data\n      class for convenience. Several of these parameters return arrays, rather than singular values because they\n      are recorded for every spectra in the series, e.g. <code>npt</code>, <code>mny</code>, <code>mxy</code>, <code>tim</code>, <code>nsn</code>.</p>\n</blockquote>\n", "bases": "Data"}, {"fullname": "brukeropus.file.file.Data3D.__init__", "modulename": "brukeropus.file.file", "qualname": "Data3D.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">data_info</span><span class=\"p\">:</span> <span class=\"n\">brukeropus</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">FileBlockInfo</span>,</span><span class=\"param\">\t<span class=\"n\">data_status_info</span><span class=\"p\">:</span> <span class=\"n\">brukeropus</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">FileBlockInfo</span></span>)</span>"}, {"fullname": "brukeropus.file.file.Data3D.params", "modulename": "brukeropus.file.file", "qualname": "Data3D.params", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D.y", "modulename": "brukeropus.file.file", "qualname": "Data3D.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D.x", "modulename": "brukeropus.file.file", "qualname": "Data3D.x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D.num_spectra", "modulename": "brukeropus.file.file", "qualname": "Data3D.num_spectra", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Data3D.label", "modulename": "brukeropus.file.file", "qualname": "Data3D.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.Parameters", "modulename": "brukeropus.file.file", "qualname": "Parameters", "kind": "class", "doc": "<p>Class containing parameter metadata of an OPUS file.</p>\n\n<p>Parameters of an OPUS file are stored as key, val pairs, where the key is always three chars.  For example, the\nbeamsplitter is stored in the \"bms\" attribute, source in \"src\" etc.  A list of known keys, with friendly label can\nbe found in <code>brukeropus.file.constants.PARAM_LABELS</code>.  The keys in an OPUS file are not case sensitive, and stored\nin all CAPS (i.e. <code>BMS</code>, <code>SRC</code>, etc.) but this class uses lower case keys to follow python convention.  The class is\ninitialized from a list of parameter <code>FileBlockInfo</code>.  The key, val items in blocks of the list are combined into\none parameter class, so care must be taken not to pass blocks that will overwrite each others keys.  Analagous to a\ndict, the keys, values, and (key, val) can be iterated over using the functions: <code>keys()</code>, <code>values()</code>, and <code>items()</code>\nrespectively.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes from OPUS file. see: <code>brukeropus.file.parser.read_opus_file_bytes</code></li>\n<li><strong>param_blocks:</strong>  list of <code>FileBlockInfo</code>; every block in the list should be classified as a parameter block.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>xxx:</strong>  parameter attributes are stored as three char keys. Which keys are generated depends on the list of\n<code>FileBlockInfo</code> that is used to initialize the class. If input list contains a single data status\n<code>FileBlockInfo</code>, attributes will include: <code>fxv</code>, <code>lxv</code>, <code>npt</code> (first x-val, last x-val, number of points),\netc. Other blocks produce attributes such as: <code>bms</code>, <code>src</code>, <code>apt</code> (beamsplitter, source, aperture) etc. A\nfull list of keys available in a given Parameters instance are given by the <code>keys()</code> method.</li>\n<li><strong>datetime:</strong>  if blocks contain the keys: <code>dat</code> (date) and <code>tim</code> (time), the <code>datetime</code> attribute of this class will\nbe set to a python <code>datetime</code> object. Currently, only data status blocks are known to have these keys. If\n<code>dat</code> and <code>tim</code> are not present in the class, the <code>datetime</code> attribute will return <code>None</code>.</li>\n</ul>\n"}, {"fullname": "brukeropus.file.file.Parameters.__init__", "modulename": "brukeropus.file.file", "qualname": "Parameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">param_blocks</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span>)</span>"}, {"fullname": "brukeropus.file.file.Parameters.keys", "modulename": "brukeropus.file.file", "qualname": "Parameters.keys", "kind": "function", "doc": "<p>Returns a <code>dict_keys</code> class of all valid keys in the class (i.e. dict.keys())</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.Parameters.values", "modulename": "brukeropus.file.file", "qualname": "Parameters.values", "kind": "function", "doc": "<p>Returns a <code>dict_values</code> class of all the values in the class (i.e. dict.values())</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.Parameters.items", "modulename": "brukeropus.file.file", "qualname": "Parameters.items", "kind": "function", "doc": "<p>Returns a <code>dict_items</code> class of all the values in the class (i.e. dict.items())</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.file.Parameters.datetime", "modulename": "brukeropus.file.file", "qualname": "Parameters.datetime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory", "modulename": "brukeropus.file.file", "qualname": "FileDirectory", "kind": "class", "doc": "<p>Contains type and pointer information for all blocks of data in an OPUS file.</p>\n\n<p><code>FileDirectory</code> information is decoded from the raw file bytes of an OPUS file. First the header is read which\nprovides the start location of the directory block, number of blocks in file, and maximum number of blocks the file\nsupports. Then it decodes the block pointer information from each entry of the file's directory block. Rather than\nstore all file blocks in a single list (as it is done in the OPUS file directory), this class sorts the blocks into\ncategories: <code>data</code>, <code>data_status</code>, <code>params</code>, <code>rf_params</code>, <code>directory</code>, and <code>file_log</code>.  It also pairs the data\nblocks with their corresponding <code>data_status</code> block to simplify grouping y data with the parameters that are used to\ngenerate x data and other data block specific metadata.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes from OPUS file. see: <code>brukeropus.file.parser.read_opus_file_bytes</code></li>\n</ul>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>start:</strong>  pointer to start location of the directory block</li>\n<li><strong>max_blocks:</strong>  maximum number of blocks supported by file</li>\n<li><strong>num_blocks:</strong>  total number of blocks in the file</li>\n<li><strong>data_blocks:</strong>  list of <code>FileBlockInfo</code> that contain array data (e.g. sample, reference, phase)</li>\n<li><strong>data_status_blocks:</strong>  list of <code>FileBlockInfo</code> that contain metadata specific to a data block (units, etc.)</li>\n<li><strong>param_blocks:</strong>  list of <code>FileBlockInfo</code> that contain metadata about the measurement sample</li>\n<li><strong>rf_param_blocks:</strong>  list of <code>FileBlockInfo</code> that contain metatdata about the reference measurement</li>\n<li><strong>directory_block:</strong>  <code>FileBlockInfo</code> for directory block that contains all the block info in the file</li>\n<li><strong>file_log_block:</strong>  <code>FileBlockInfo</code> of the file log (changes, etc.)</li>\n<li><strong>data_and_status_block_pairs:</strong>  (data: <code>FileBlockInfo</code>, data_status: <code>FileBlockInfo</code>) which pairs the data status\nparameter block (time, x units, y units, etc.) with the data block it informs</li>\n<li><strong>unknown_blocks:</strong>  list of <code>FileBlockInfo</code> with an unrecognized type (i.e. not sure how to parse)</li>\n</ul>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.__init__", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span>)</span>"}, {"fullname": "brukeropus.file.file.FileDirectory.data_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.data_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "brukeropus.file.file.FileDirectory.data_status_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.data_status_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "brukeropus.file.file.FileDirectory.param_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.param_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "brukeropus.file.file.FileDirectory.rf_param_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.rf_param_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "brukeropus.file.file.FileDirectory.directory_block", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.directory_block", "kind": "variable", "doc": "<p></p>\n", "annotation": ": brukeropus.file.file.FileBlockInfo"}, {"fullname": "brukeropus.file.file.FileDirectory.file_log_block", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.file_log_block", "kind": "variable", "doc": "<p></p>\n", "annotation": ": brukeropus.file.file.FileBlockInfo"}, {"fullname": "brukeropus.file.file.FileDirectory.unknown_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.unknown_blocks", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "brukeropus.file.file.FileDirectory.data_and_status_block_pairs", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.data_and_status_block_pairs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.max_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.max_blocks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.num_blocks", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.num_blocks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.start", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.file.FileDirectory.version", "modulename": "brukeropus.file.file", "qualname": "FileDirectory.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.parser", "modulename": "brukeropus.file.parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.parser.read_opus_file_bytes", "modulename": "brukeropus.file.parser", "qualname": "read_opus_file_bytes", "kind": "function", "doc": "<p>Returns <code>bytes</code> of an OPUS file specified by <code>filepath</code> (or <code>None</code>).</p>\n\n<p>Function determines if <code>filepath</code> points to an OPUS file by reading the first four bytes which are always the same\nfor OPUS files.  If <code>filepath</code> is not a file, or points to a non-OPUS file, the function returns <code>None</code>.  Otherwise\nthe function returns the entire file as raw <code>bytes</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath (str or Path):</strong>  full filepath to OPUS file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>filebytes (bytes):</strong> raw bytes of OPUS file or <code>None</code> (if filepath does not point to an OPUS file)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.get_block_type", "modulename": "brukeropus.file.parser", "qualname": "get_block_type", "kind": "function", "doc": "<p>Converts an int32 block type code to a six-integer tuple <code>block_type</code>.</p>\n\n<p>This function is used to decode the <code>type_int</code> from the directory block of an OPUS file into a tuple of integers.\nEach integer in the tuple provides information about the associated data block.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>type_int:</strong>  32-bit integer decoded from file directory block</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>block_type (tuple):</strong> six-integer tuple which specifies the block type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">type_int</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_header", "modulename": "brukeropus.file.parser", "qualname": "parse_header", "kind": "function", "doc": "<p>Parses the OPUS file header.</p>\n\n<p>The header of an OPUS file contains some basic information about the file including the version number, location of\nthe directory block, and number of blocks in the file. This header is first to be parsed as it specifies how to\nread the file directory block (which contains information about each block in the file)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes of OPUS file (all bytes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>header_info (tuple):</strong> <br />\n      ( <br />\n          <strong>version (float64):</strong> program version number as a floating-point date (later versions always greater) <br />\n          <strong>directory_start (int32):</strong> pointer to start location of directory block (number of bytes) <br />\n          <strong>max_blocks (int32):</strong> maximum number of blocks supported by the directory block (this should only be\n              relevant when trying to edit an OPUS file, i.e. when adding data blocks to a file) <br />\n          <strong>num_blocks (int32):</strong> total number of blocks in the opus file <br />\n      )</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_directory", "modulename": "brukeropus.file.parser", "qualname": "parse_directory", "kind": "function", "doc": "<p>Parses directory block of OPUS file and yields block info for all blocks in the file as a generator.</p>\n\n<p>The directory block of an OPUS file contains information about every block in the file. The block information is\nstored as three int32 values: <code>type_int</code>, <code>size_int</code>, <code>start</code>.  <code>type_int</code> is an integer representation of the block\ntype. The bits of this <code>type_int</code> have meaning and are parsed into a tuple using <code>get_block_type</code>. The <code>size_int</code> is\nthe size of the block in 32-bit words. <code>start</code> is the starting location of the block (in number of bytes).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes of OPUS file (all bytes)</li>\n<li><strong>start:</strong>  start location of the directory block (specified in file header)</li>\n<li><strong>num_blocks:</strong>  total number of blocks in the file (specified in file header)</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p><strong>block_info (tuple):</strong> <br />\n      ( <br />\n          <strong>block_type (tuple):</strong> six-integer tuple which specifies the block type (see: <code>get_block_type</code>) <br />\n          <strong>size (int):</strong> size (number of bytes) of the block <br />\n          <strong>start (int):</strong> pointer to start location of the block (number of bytes) <br />\n      )</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">directory_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">num_blocks</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_param_block", "modulename": "brukeropus.file.parser", "qualname": "parse_param_block", "kind": "function", "doc": "<p>Parses the bytes in a parameter block and yields the key, value pairs as a generator.</p>\n\n<p>Parameter blocks are in the form: <code>XXX</code>, <code>dtype_code</code>, <code>size</code>, <code>val</code>.  <code>XXX</code> is a three char abbreviation of the\nparameter (key). The value of the parameter is decoded according to the <code>dtype_code</code> and size integers to be either:\n<code>int</code>, <code>float</code>, or <code>string</code>.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  raw bytes of OPUS file (all bytes)</li>\n<li><strong>size:</strong>  total number of bytes in parameter block (specified in file directory)</li>\n<li><strong>start:</strong>  pointer to start location of parameter block (specified in file directory)</li>\n</ul>\n\n<h6 id=\"yields\">Yields:</h6>\n\n<blockquote>\n  <p><strong>items (tuple):</strong> (key, value) pairs where key is three char string (lowercase) and value can be <code>int</code>, <code>float</code>\n      or <code>string</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.get_dpf_dtype_count", "modulename": "brukeropus.file.parser", "qualname": "get_dpf_dtype_count", "kind": "function", "doc": "<p>Returns numpy dtype and array count from the data point format (dpf) and block size (in bytes).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dpf:</strong>  data point format integer stored in data status block.\ndpf = 1 -> array of float32\ndpf = 2 -> array of int32</li>\n<li><strong>size:</strong>  Block size in bytes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>dtype (numpy.dtype):</strong> <code>numpy</code> dtype for defining an <code>ndarray</code> to store the data\n  <strong>count (int):</strong> length of array calculated from the block size and byte size of the dtype.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dpf</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_data_block", "modulename": "brukeropus.file.parser", "qualname": "parse_data_block", "kind": "function", "doc": "<p>Parses the bytes in a data block (specified by <code>size</code> and <code>start</code> pointers) and returns a <code>numpy</code> array.</p>\n\n<p>Data blocks contain no metadata, only the y-values of a data array. Data arrays include: single-channel sample,\nreference, phase, interferograms, and a variety of resultant data (transmission, absorption, etc.).  Every data\nblock should have a corresponding data status parameter block which can be used to generate the x-array values for\nthe data block. The data status block also specifies the data type of the data array with the <code>DPF</code> parameter. It\nappears that OPUS currently exclusively stores data blocks as 32-bit floats, but has a reservation for 32-bit\nintegers when <code>DPF</code> = 2.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  full OPUS file bytes</li>\n<li><strong>size:</strong>  size of data block to decode in bytes</li>\n<li><strong>start:</strong>  pointer to start location of the data block</li>\n<li><strong>dpf:</strong>  data-point-format integer stored in corresponding data status block.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>y_array (numpy.ndarray):</strong> <code>numpy</code> array of y values contained in the data block</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">dpf</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_3d_data_block", "modulename": "brukeropus.file.parser", "qualname": "parse_3d_data_block", "kind": "function", "doc": "<p>Parses the bytes in a 3D data block (series of spectra) and returns a data <code>dict</code> containing data and metadata.</p>\n\n<p>3D data blocks are structured differently than standard data blocks. In addition to the series of spectra, they\ninclude metadata for each of the spectrum.  This function returns a <code>dict</code> containing all the extracted information\nfrom the data block.  The series spectra is formed into a 2D array while metadata captured for each spectra is\nformed into a 1D array (length = number of spectral measurements in the series).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  full OPUS file bytes</li>\n<li><strong>start:</strong>  pointer to start location of the data block</li>\n<li><strong>dpf:</strong>  data-point-format integer stored in corresponding data status block.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>data_dict (dict):</strong> <code>dict</code> containing all extracted information from the data block <br />\n      { <br />\n          <strong>version:</strong> file format version number (should be 0) <br />\n          <strong>num_blocks:</strong> number of sub blocks; each sub block features a data spectra and associated metadata <br />\n          <strong>offset:</strong> offset in bytes to the first sub data block <br />\n          <strong>data_size:</strong> size in bytes of each sub data block <br />\n          <strong>info_size:</strong> size in bytes of the metadata info block immediately following the sub data block <br />\n          <strong>store_table:</strong> run numbers of the first and last blocks to keep track of skipped spectra <br />\n          <strong>y:</strong> 2D <code>numpy</code> array containing all spectra (C-order) <br />\n          <strong>metadata arrays:</strong> series of metadata arrays in 1D array format (e.g. <code>npt</code>, <code>mny</code>, <code>mxy</code>, <code>tim</code>).\n              The most useful one is generally <code>tim</code>, which can be used as the time axis for 3D data plots. <br />\n      }</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">dpf</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.parser.parse_file_log", "modulename": "brukeropus.file.parser", "qualname": "parse_file_log", "kind": "function", "doc": "<p>Parses the file log in an OPUS file and returns a list of strings contained in the log.</p>\n\n<p>The file log block of an OPUS file contains some information about how the file was generated and edits that have\nbeen performed on the file.  This function parses the file log as a list of strings using b'\u0000' as a seperator,\nand does not take any steps to parameterizing what is contained in the log.  This log is generally not needed to\nretrieve the file data and metadata, but might be useful for inspecting the file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filebytes:</strong>  full OPUS file bytes</li>\n<li><strong>size:</strong>  size of file log block to decode in bytes</li>\n<li><strong>start:</strong>  pointer to start location of the file log block</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p><strong>strings (list):</strong> list of strings found in the file log.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filebytes</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils", "modulename": "brukeropus.file.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brukeropus.file.utils.find_opus_files", "modulename": "brukeropus.file.utils", "qualname": "find_opus_files", "kind": "function", "doc": "<p>Finds all files in a directory with a strictly numeric extension (OPUS file convention).</p>\n\n<p>Returns a list of all files in directory that end in .# (e.g. file.0, file.1, file.1001, etc.). Setting recursive\nto true will search directory and all sub directories recursively. No attempt is made to verify the files are\nactually OPUS files (requires opening the file); the function simply looks for files that match the naming pattern.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>directory (str or Path):</strong>  path indicating directory to search</li>\n<li><strong>recursive:</strong>  Set to True to recursively search sub directories as well</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>filepaths (list): list of filepaths that match OPUS naming convention (numeric extension)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span>, </span><span class=\"param\"><span class=\"n\">recursive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.get_param_label", "modulename": "brukeropus.file.utils", "qualname": "get_param_label", "kind": "function", "doc": "<p>Returns a short but descriptive label for 3-letter parameters. For example, bms returns Beamsplitter.</p>\n\n<p>The 3-letter parameter input is not case sensitive.  This package includes the majority of parameters that OPUS\nuses, but in the event a parameter label is not known, this function will return: \"Unknown XXX\" where XXX is the\nunknown 3-letter parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>param:</strong>  three letter parameter code (e.g. bms, src, npt, etc.) [not case sensitive]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>label (str): Human-readable string label for the parameter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.get_type_code_label", "modulename": "brukeropus.file.utils", "qualname": "get_type_code_label", "kind": "function", "doc": "<p>Returns the type code label of a file block given the position index and value of the type code.</p>\n\n<p>The file blocks on an OPUS file feature six-integer type codes, for example (3, 1, 1, 2, 0, 0), that categorize the\ncontents of the file block. The positional index defines the category, while the value at that index defines the\nspecific type of that category.  For example, the first integer (pos_idx=0), describes the type of data in the\nblock, if applicable:</p>\n\n<pre><code>0: Undefined or N/A,\n1: Real Part of Complex Data,\n2: Imaginary Part of Complex Data,\n3: Amplitude\n</code></pre>\n\n<p>This package includes the majority of type codes that OPUS uses, but in the event a type code label is not known,\nthis function will return: \"Unknown 0 4\" where the first number is the position index, and the second is the\nunknown value integer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos_idx:</strong>  positional index of the type code (0 - 5)</li>\n<li><strong>val:</strong>  value of the type code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>label (str): human-readable string label that describes the type code.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pos_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.get_block_type_label", "modulename": "brukeropus.file.utils", "qualname": "get_block_type_label", "kind": "function", "doc": "<p>Converts a six-integer tuple block type into a human readable label.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_type:</strong>  six integer tuple found in the OPUS file directory that describes the block type</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>label (str): human-readable string label</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_type</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.get_data_key", "modulename": "brukeropus.file.utils", "qualname": "get_data_key", "kind": "function", "doc": "<p>Returns a shorthand key for a given data block type: sm, rf, igsm, a, t, r, etc.</p>\n\n<p>Determines if the data block type is an interferogram, single-channel, absorption, etc. and whether it is associated\nwith the sample or reference channel and returns a shortand key-like label: sm, rf, igsm, igrf, a, t, r, etc.  For\nthe full data label (e.g. Sample Spectrum, Absorbance) use: get_block_type_label.\nThis package includes the majority of type codes that OPUS uses, but in the event a type code label is not known,\nthis function will return: \"_33\" or \"sm_33\" where 33 will change to the unkown block_type integer value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_type:</strong>  six integer tuple found in the OPUS file directory that describes the block type</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>key (str): shorthand string label that can be utilized as a data key (e.g. \"sm\", \"igrf\", \"a\")</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_type</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brukeropus.file.utils.parse_file_and_print", "modulename": "brukeropus.file.utils", "qualname": "parse_file_and_print", "kind": "function", "doc": "<p>Parses an OPUS file and prints the block information as it goes along to the console.</p>\n\n<p>This function demonstrates the basic usage and interaction of the parsing functions.  It\ncan also be used to diagnose a file parsing issue if one comes up.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath (str or Path):</strong>  filepath to an OPUS file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">120</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];
>>>>>>> origin/master

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();